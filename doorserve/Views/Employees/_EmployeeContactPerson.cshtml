
@model doorserve.Models.EmployeeModel
@Html.HiddenFor(x => x.ContactId)
@Html.HiddenFor(x => x.RefKey)
@Html.HiddenFor(x => x.Action)
@Html.HiddenFor(x => x.ConAdhaarFileName)
@Html.HiddenFor(x => x.ConVoterIdFileName)
@Html.HiddenFor(x => x.ConPanFileName)
@Html.HiddenFor(x => x.CurrentEmail)

@Html.ValidationSummary(false)
<div class="form-group">
    <div class="row">
        <div class="col-md-12">
            <div class="col-md-6 col-sm-6 col-xs-12">
                @Html.LabelFor(model => model.ConFirstName, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"></span>
                    @Html.TextBoxFor(x => x.ConFirstName, new { @class = "form-control", @placeholder = "First Name" })
                </div>
                @Html.ValidationMessageFor(model => model.ConFirstName, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6 col-sm-6 col-xs-12">
                @Html.LabelFor(model => model.ConLastName, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"></span>
                    @Html.TextBoxFor(x => x.ConLastName, new { @class = "form-control", @placeholder = "Last Name" })
                </div>
                @Html.ValidationMessageFor(model => model.ConLastName, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
</div>

<div class="form-group">
    <div class="row">
        <div class="col-md-12">
            <div class="col-md-6 col-sm-6 col-xs-12">
                @Html.LabelFor(model => model.ConMobileNumber, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"></span>
                    @Html.TextBoxFor(x => x.ConMobileNumber, new { @class = "form-control", @placeholder = "Mobile number" })
                </div>
                @Html.ValidationMessageFor(model => model.ConMobileNumber, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6 col-sm-6 col-xs-12">
                @Html.LabelFor(model => model.ConEmailAddress, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"></span>
                    @Html.TextBoxFor(x => x.ConEmailAddress, new { @class = "form-control", @placeholder = "Email-Address" })
                </div>
                @Html.ValidationMessageFor(model => model.ConEmailAddress, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
</div>
<div class="form-group">
    <div class="row">
        <div class="col-md-12">
            <div class="col-md-6 col-sm-6 col-xs-12">
                @Html.LabelFor(model => model.ConPanNumber, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"></span>
                    @Html.TextBoxFor(x => x.ConPanNumber, new { @class = "form-control", @placeholder = "Pan number" })

                </div>
                @Html.ValidationMessageFor(model => model.ConPanNumber, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-5 col-sm-5 col-xs-12">
                @Html.LabelFor(model => model.ConPanNumberFilePath, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"></span>
                    @Html.TextBoxFor(x => x.ConPanNumberFilePath, new { @type = "file", @class = "form-control", placeholder = "", @onchange = "readURL1(this);", accept = "image/*" })

                </div>
                @Html.ValidationMessageFor(model => model.ConPanNumberFilePath, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-1 col-sm-1">
                @if (Model != null)
                {

                <img id="blah" src="~/UploadedImages/employees/PANCards/@Model.ConPanFileName" width="50" height="50" style="margin-top:15px" />
                }
                else
                {
                <img src="~/Content/img/icon-img/doc-icon.png" id="conPanImg" class="a thumb-Img" style="pointer-events: none;">
                }
            </div>
        </div>
    </div>
</div>
<!-- Text input-->
<div class="form-group">
    <div class="row">
        <div class="col-md-12">
            <div class="col-md-6 col-sm-6 col-xs-12">
                @Html.LabelFor(model => model.ConVoterId, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"></span>
                    @Html.TextBoxFor(x => x.ConVoterId, new { @class = "form-control", @placeholder = "Voter Id" })

                </div>
                @Html.ValidationMessageFor(model => model.ConVoterId, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-5 col-sm-5 col-xs-12">
                @Html.LabelFor(model => model.ConVoterIdFilePath, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"></span>
                    @Html.TextBoxFor(x => x.ConVoterIdFilePath, new { @type = "file", @class = "form-control", placeholder = "", @onchange = "readURL1(this);", accept = "image/*" })

                </div>
                @Html.ValidationMessageFor(model => model.ConVoterIdFilePath, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-1 col-sm-1">

                @if (Model != null)
                {

                <img id="blah" src="~/UploadedImages/employees/VoterIds/@Model.ConVoterIdFileName" width="50" height="50" style="margin-top:15px" />
                }
                else
                {
                <img src="~/Content/img/icon-img/doc-icon.png" class="a thumb-Img" id="conVoterImg" style="pointer-events: none;">
                }
            </div>
        </div>
    </div>
</div>
<div class="form-group">
    <div class="row">
        <div class="col-md-12">
            <div class="col-md-6 col-sm-6 col-xs-12">
                @Html.LabelFor(model => model.ConAdhaarNumber, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"></span>
                    @Html.TextBoxFor(x => x.ConAdhaarNumber, new { @class = "form-control", @placeholder = "Adhaar number" })

                </div>
                @Html.ValidationMessageFor(model => model.ConAdhaarNumber, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-5 col-sm-5 col-xs-12">
                @Html.LabelFor(model => model.ConAdhaarNumberFilePath, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"></span>
                    @Html.TextBoxFor(x => x.ConAdhaarNumberFilePath, new { @type = "file", @class = "form-control", placeholder = "", @onchange = "readURL1(this);", accept = "image/*" })

                </div>
                @Html.ValidationMessageFor(model => model.ConAdhaarNumberFilePath, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-1 col-sm-1">
                @if (Model != null)
                {

                <img id="blah" src="~/UploadedImages/employees/ADHRS/@Model.ConAdhaarFileName" width="50" height="50" style="margin-top:15px" />
                }
                else
                {
                <img src="~/Content/img/icon-img/doc-icon.png" id="conAdhrImg" class="a thumb-Img" style="pointer-events: none;">
                }
            </div>

        </div>
    </div>
</div>
<div class="form-group">
    <div class="row">
        <div class="col-md-12">
            <div class="col-md-6 col-sm-6 col-xs-12">
                @Html.LabelFor(model => model.AddressTypeId, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"></span>
                    @Html.DropDownListFor(model => model.AddressTypeId, Model.AddressTypelist,
           "Select", new { @class = "form-control" })

                </div>
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-6 col-sm-6 col-xs-12">
                @Html.LabelFor(model => model.PinNumber, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"></span>
                    @Html.TextBoxFor(x => x.PinNumber, new { @class = "form-control", @placeholder = "Pin code" , @OnChange = "GetLocation()" })
                </div>
                @Html.ValidationMessageFor(model => model.PinNumber, "", new { @class = "text-danger" })
            </div>

        </div>
    </div>
</div>
<div class="form-group">
    <div class="row">
        <div class="col-md-12">
            <div class="col-md-6 col-sm-6 col-xs-12">
                @Html.LabelFor(model => model.LocationName, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"></span>
                    @Html.DropDownListFor(model => model.LocationId, Model.LocationList, new { @class = "form-control" })
                </div>
                @Html.ValidationMessageFor(model => model.LocationName, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6 col-sm-6 col-xs-12">
                @Html.LabelFor(model => model.StateId, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"></span>
                    @Html.TextBoxFor(model => model.State, new { @class = "form-control", id = "State" })
                    @Html.HiddenFor(model => model.StateId, new { id = "StateId" })

                </div>
                @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
            </div>

        </div>
    </div>
</div>
<div class="form-group">
    <div class="row">
        <div class="col-md-12">
            <div class="col-md-6 col-sm-6 col-xs-12">
                @Html.LabelFor(model => model.CountryId, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"></span>
                    @Html.TextBoxFor(model => model.Country, new { @class = "form-control", id = "Country" })
                    @Html.HiddenFor(model => model.CountryId, new { id = "CountryId" })
                </div>
                @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6 col-sm-6 col-xs-12">
                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"></span>
                    @Html.TextBoxFor(x => x.Address, new { @class = "form-control", @placeholder = "Address" })

                </div>
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>

        </div>
    </div>
</div>
<div class="form-group">
    <div class="row">
        <div class="col-md-12">
            <div class="col-md-6 col-sm-6 col-xs-12">
                @Html.LabelFor(model => model.Locality, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"></span>
                    @Html.TextBoxFor(x => x.Locality, new { @class = "form-control", @placeholder = "Locality" })

                </div>
                @Html.ValidationMessageFor(model => model.Locality, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6 col-sm-6 col-xs-12">
                @Html.LabelFor(model => model.NearLocation, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"></span>
                    @Html.TextBoxFor(x => x.NearLocation, new { @class = "form-control", @placeholder = "Near by location" })

                </div>
                @Html.ValidationMessageFor(model => model.NearLocation, "", new { @class = "text-danger" })
            </div>

        </div>
    </div>
</div>
<div class="form-group">
    <div class="row">
        <div class="col-md-12">
            <div class="col-md-6 col-sm-6 col-xs-12">
                @Html.LabelFor(model => model.IsUser, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">

                    @Html.CheckBoxFor(model => model.IsUser, new { @checked = "checked" })
                </div>
            </div>
        </div>
    </div>
</div>
@Scripts.Render("~/bundles/jquery")
<script>
    $(document).ready(function () {

        // $("#District").attr('readonly', true);
        $("#State").attr('readonly', true);
        $("#Country").attr('readonly', true);
    });

    function GetLocation() {
        console.log("First step");
        var Id = $("#PinNumber").val();
        debugger
        if (Id.length == 6) {
            $.ajax({
                url: "/DropdownBind/GetLocationByPinCode",
                async: true,
                type: "GET",
                data: { pin: Id },
                success: function (result) {
                    // $("#District").val(result.District);
                    $("#State").val(result.State);
                    $("#Country").val(result.Country);
                    $("#StateId").val(result.StateId);
                    $("#CountryId").val(result.CountryId);
                    var obj = { value: Id, Other: result.LocationId };
                    AjaxWithValue('BindLocationByPinCodeJson', 'LocationId', obj);
                }
            });
        }
    };

    function AjaxWithValue(method, ddl, e) {
        var val = e.value;
        var other = e.Other;
        console.log(other);
        $.ajax({
            type: "GET",
            url: "/DropdownBind/" + method + "?value=" + val,
            data: '{}',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                $("#" + ddl).empty();

                //var sel = new Option('-Select-', '');
                //$('#' + ddl).append(sel);
                for (var i = 0; i < data.length; i++) {
                    var opt = new Option(data[i].Text, data[i].Value);
                    $('#' + ddl).append(opt);
                }

                if (other != undefined) {
                    $('#' + ddl).val(other);

                }

            }
        });
    }

</script>

@Scripts.Render("~/bundles/jqueryval")
