@model IEnumerable<doorserve.Models.ClientData.UploadedExcelModel>
@using doorserve.Models
@using GridMvc.Html

@{
    ViewBag.Title = "Open Calls";
    Layout = "~/Views/Shared/_LayoutPage1.cshtml";
    int count = 0;
}

<div class="panel-heading">
    <div class="row">
        <div class="col-md-6"><h3 class="m-y-0">Open Calls</h3></div>

        <div class="col-md-6  add-tem-btn-mar-top">





            <div class="panel-tools">
                @if (Permissions.Rights.ExcelExport)
                {
                    using (Html.BeginForm("ExportToExcel", "ClientData", FormMethod.Get))
                    {

                        @Html.Hidden("tabIndex", 'O')
                        <button type="submit" class="tools-icon btn btn-primary btn-sm excel"> Export to Excel</button>
                    }
                }

            </div>
        </div>
    </div>

</div>

<div class="row">
    <div class="col-md-12">



        @if (Permissions.Rights.View)
        {


            <div class="panel-body">

                <div class="row">
                    <div class="col-md-12">

                        <div class="panel panel-default panel-table">

                            <div class="panel-body">
                                <div class="table-responsive for-popup-height">
                                    <div class="code-cut">
                                        @Html.Grid(Model).Columns(columns =>
                                        {

                                        columns.Add()
                                            .Titled("#SLN")
                                            .SetWidth(10)
                                            .RenderValueAs(o =>
                                            {
                                            count++;
                                            return @<text> @count </text>;
});
columns.Add(c => c.CreatedOn).Titled("Call Date").Filterable(true).Format("{0:dd-MM-yyyy}");
columns.Add(model => model.CRN).Titled("Call Id")
                             .Filterable(true).Sanitized(false).Encoded(false).
                               RenderValueAs(model => Html.ActionLink(model.CRN, "ManageServiceProvidersDetails", "ServiceCenter", new { CRN = model.CRN, Param = "A" }, null));
columns.Add(c => c.IsRepeat).Titled("Is Repeat Call").Filterable(true);
columns.Add(c => c.Status).Titled("Status").Filterable(true);
columns.Add(c => c.ClientName).Titled("Client Name").Filterable(true);
columns.Add(c => c.ProcessName).Titled("Process Name").Filterable(true);
columns.Add(c => c.DataSource).Titled("Data Source").Filterable(true);
columns.Add(c => c.ServiceTypeName).Titled("Service Type").Filterable(true);
columns.Add(c => c.DeliveryTypeName).Titled("Service Delivery Type").Filterable(true);
columns.Add(c => c.CustomerName).Titled("Customer Name").Filterable(true);
columns.Add(c => c.CustomerContactNumber).Titled("Customer Mob").Filterable(true);
columns.Add(c => c.CustomerEmail).Titled("Customer E-mail").Filterable(true);
columns.Add(c => c.CustomerAddress).Titled("Address").Filterable(true);
columns.Add(c => c.CustomerCity).Titled("Location").Filterable(true);
columns.Add(c => c.CustomerPincode).Titled("PinCode").Filterable(true);
columns.Add(c => c.DeviceCategory).Titled("Device Category").Filterable(true);
columns.Add(c => c.DeviceBrand).Titled("Device Brand").Filterable(true);
columns.Add(c => c.DeviceModel).Titled("Device Model").Filterable(true);
columns.Add(c => c.DOP).Titled("Device DOP").Filterable(true);
columns.Add(c => c.PurchaseFrom).Titled("Device Purchase Form").Filterable(true);
}).WithPaging(10).Sortable(true)
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

    </div>
</div>