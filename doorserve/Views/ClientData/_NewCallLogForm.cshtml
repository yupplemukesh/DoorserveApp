@model doorserve.Models.ServiceCenter.CallDetailsModel

@if (!Model.IsClient && Model.ClientId == null && Model.DataSourceId == 101)
{
    <div class="panel panel-default panel-table b-t-0">

        <div class="panel-heading">
            <div class="row">
                <div class="col-md-12">
                    <div class="form-horizontal">
                        <div class="panel-body">
                            <div class="form-group row m-b-0">
                                <div class="col-sm-4 col-md-2 p-l-0"> <h4>Select Client </h4></div>
                                <div class="col-sm-8 col-md-5">
                                    @Html.DropDownListFor(x => x.ClientId, Model.ClientList, "--Select--", new { @class = "form-control", onchange = "AjaxWithFilter1('BindCategoriesJson', 'DeviceCategoryId', this)" })
                                    @Html.ValidationMessageFor(x => x.ClientId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>


    </div>
}
<div class="panel panel-default panel-table ">
    @Html.Partial("~/views/common/_CustomerInfoForm.cshtml", Model)
</div>
<div class="panel panel-default panel-table">
    <div class="panel-body">
        <div class="form-horizontal">
            <div class="panel-default m-b-10">
                <div class="panel-heading p-l-0 p-t-0 ">
                    <div class="row">
                        <div class="col-md-12">
                            <h4 class="m-t-0 m-b-5">Call Information</h4>
                        </div>
                    </div>
                </div>
            </div>

            @if (Model.ClientId != null && Model.DataSourceId == 101)
            {
                <div class="form-group row">

                    <label class="col-sm-1 control-label" for="form-control-1">Call Date</label>
                    <div class="col-sm-3">
                        @Html.TextBoxFor(model => model.CreatedOn, "{0:dd/MM/yyyy}", new { @class = "form-control input-md", @placeholder = "Call Date", @disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.CreatedOn, "", new { @class = "text-danger" })
                    </div>


                    <label class="col-sm-1 control-label" for="form-control-1">Call Id</label>
                    <div class="col-sm-3">
                        @Html.TextBoxFor(model => model.CRN, new { @class = "form-control input-md", @placeholder = "Call Id", @disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.CRN, "", new { @class = "text-danger" })
                    </div>

                    <label class="col-sm-1 control-label" for="form-control-1">Status</label>
                    <div class="col-sm-3">
                        @Html.TextBoxFor(model => model.Status, new { @class = "form-control input-md", @placeholder = "Status", @disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                    </div>

                </div>


                <div class="form-group row">

                    <label class="col-sm-1 control-label" for="form-control-1">Client Name</label>
                    <div class="col-sm-3">
                        @Html.TextBoxFor(model => model.ClientName, new { @class = "form-control input-md", @placeholder = "Client Name", @disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.ClientName, "", new { @class = "text-danger" })
                    </div>


                    <label class="col-sm-1 control-label" for="form-control-1">Process Name</label>
                    <div class="col-sm-3">
                        @Html.TextBoxFor(model => model.ProcessName, new { @class = "form-control input-md", @placeholder = "Process Name", @disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.ProcessName, "", new { @class = "text-danger" })
                    </div>

                    <label class="col-sm-1 control-label" for="form-control-1">Data Source</label>
                    <div class="col-sm-3">
                        @Html.TextBoxFor(model => model.DataSource, new { @class = "form-control input-md", @placeholder = "Data Source", @disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.DataSource, "", new { @class = "text-danger" })
                    </div>

                </div>
            }



            <div class="form-group row">
                <div class="col-sm-12 col-md-3"> <h5 class="m-t-0">Service Type <span class="error-alert">*</span></h5></div>
                <div class="col-sm-12 col-md-9">

                    @foreach (var item in Model.ServiceTypeList)
                    {
                        <label class="custom-control custom-control-primary custom-checkbox p-l-0">
                            @Html.RadioButtonFor(x => x.ServiceTypeId, item.Value)
                            <span>@item.Text</span>
                        </label>
                    }

                    <div class="row">
                        <div class="col-md-12">
                            @Html.ValidationMessageFor(x => x.ServiceTypeId, "", new { @class = "text-danger" })

                        </div>

                    </div>
                </div>
            </div>

            <div class="form-group row">
                <div class="col-sm-12 col-md-3"> <h5 class="m-t-0">Service Delivery Type<span class="error-alert">*</span></h5></div>
                <div class="col-sm-12 col-md-9">
                    @foreach (var item in Model.DeliveryTypeList)
                    {
                        <label class="custom-control custom-control-primary custom-checkbox p-l-0">
                            @Html.RadioButtonFor(x => x.DeliveryTypeId, item.Value)
                            @Html.HiddenFor(x => item)
                            <span>@item.Text</span>
                        </label>
                    }

                    <div class="row">
                        <div class="col-md-12">
                            @Html.ValidationMessageFor(x => x.DeliveryTypeId, "", new { @class = "text-danger" })

                        </div>

                    </div>
                </div>



            </div>


        </div>
    </div>
</div>
@Html.Partial("~/views/common/_CallLogDeviceInfoForm.cshtml", Model)
@if (Model.ServiceTypeId == 8)
{
    <div id="ProblemInfo">
        @Html.Partial("~/views/common/_DeviceProblemDetails.cshtml", new doorserve.Models.ReportedProblemModel { IssueOcurringSinceDate = Model.IssueOcurringSinceDate, ProblemDescription = Model.ProblemDescription, IsRepeat = Model.IsRepeat, RefKey = Model.DeviceId })
    </div>
}
else
{
    <div id="ProblemInfo" style="display:none">
        @Html.Partial("~/views/common/_DeviceProblemDetails.cshtml", new doorserve.Models.ReportedProblemModel
        { IssueOcurringSinceDate = Model.IssueOcurringSinceDate, ProblemDescription = Model.ProblemDescription, IsRepeat = Model.IsRepeat, RefKey = Model.DeviceId })
    </div>

}
@if (Convert.ToBoolean(Model.IsRepeat))
{

    @Html.Partial("~/Views/Common/_PreviousCallDetails.cshtml",
    new doorserve.Models.PreviousCallModel
        {
            CallDate = Model.PrvCallDate,
        CallId = Model.PrvCallId,
        ProblemDescription = Model.PrvProblemDescription,
        ProblemCloseDate = Model.ProblemCloseDate
    })
    @Html.Partial("~/Views/Common/_WarranyInformationModel.cshtml",
    new doorserve.Models.WarrantyInformationModel
        {
            ExpiryDate = Model.ExpiryDate,
        Status = Model.WarranyStatus
        })
}
else
{
    <div id="PrvCall" style="display:none">
        @Html.Partial("~/Views/Common/_PreviousCallDetails.cshtml", new doorserve.Models.PreviousCallModel())
        @Html.Partial("~/Views/Common/_WarranyInformationModel.cshtml", new doorserve.Models.WarrantyInformationModel())
    </div>
}
@Html.HiddenFor(x => x.PrvCallId)

<div class="panel panel-default panel-table ">
    @Html.Partial("~/Views/Common/_AppointmentDetails.cshtml", Model)
</div>
<div class="form-group row m-t-5">
    <div class="col-md-4 col-md-offset-8">
        <a class="btn btn-danger ladda-button" data-style="expand-right">

            <span class="ladda-label">Close</span>
        </a>

        <button class="btn btn-warning ladda-button" data-style="expand-right" onclick="document.getElementById('submitthis').reset()">
            <span class="ladda-label">Reset</span>
        </button>


        @*<button class="btn btn-success" type="submit" id="btnSave">
            Submit
        </button>*@
        <input type="submit"  class="btn btn-success" id="btnSave" />
    </div>
</div>


@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/bundles/bootstrap")
<script>
    $('.datepicker-d').datepicker({     
       autoclose: true,
       todayHighlight: true,
       format: 'dd/mm/yyyy',
       endDate: new Date()
    });

       $('.datepicker-c').datepicker({
       autoclose: true,
       format: 'dd/mm/yyyy',
       endDate: new Date()
       });
          function getCustomer() {
            var mobile = $("#CustomerContactNumber").val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("BindCustomerJson", "DropdownBind")',
                data: { 'mobile': mobile },
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                async:true,
                success: function (data) {

                    console.log(data);
                    if (data[0] != undefined) {
                        $('input[name=CustomerTypeId][value="' + data[0].CustomerTypeId + '"]').prop('checked', true);
                        $("#CustomerName").val(data[0].CustomerName);
                        $("#CustomerAltConNumber").val(data[0].CustomerAltConNumber);
                        $("#CustomerEmail").val(data[0].Email);
                        $("#CustomerId").val(data[0].customerId);
                        $('input[name="AddressTypeId"][value="' + data[0].AddressTypeId + '"]').prop('checked', true);
                        $("#NearLocation").val(data[0].NearLocation);
                        $("#Address").val(data[0].Address);
                        $("#PinCode").val(data[0].PinNumber);
                        
                        $("#IsExistingCustomer").prop("checked", true);
                        $("#State").val(data[0].State);
                        $("#Country").val(data[0].Country);
                        $("#District").val(data[0].District);
                        var obj = { value: data[0].PinNumber, cvalue: data[0].LocationId };
                        AjaxWithValue('BindLocationByPinCodeJson', 'LocationId', obj);
                    }
                }
            });
        }
    function GetDeviceDetails() {
          debugger
          var sn           =      $("#DeviceSn").val();
          var ModelNo      =      $("#DeviceModelNo").val();
          var category     =      $("#DeviceCategoryId").val();
          var customername =      $("#CustomerName").val();
          var custMobile   =      $("#CustomerContactNumber").val();
          var subcategory  =      $("#DeviceSubCategoryId").val();
            if (category != 0 && sn.length != 0 && ModelNo.length != 0 && subcategory!=0 && custMobile.length!=0 &&  customername.length!=0) {
                $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetRepeatCall", "ClientData")',
                    data: { 'DeviceSN': sn, 'ModelNo': ModelNo, 'CategoryId': category,"SubCategoryId": subcategory, "CustomerName": customername,"MobileNo": custMobile  },
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    async: true,
                    success: function (data) {
                        console.log(data);
                        if (data!='Not Found') {
                            console.log(data);
                            $("#PrvCall").show();
                            var CallDate = new Date(parseInt(data.CallDate.substr(6)));
                            var month = CallDate.getMonth() + 1;
                            var ProblemDate = new Date(parseInt(data.ProblemCloseDate.substr(6)));
                            var ExpiryDate = new Date(parseInt(data.ExpiryDate.substr(6)));
                            $("#prvCallId").text(data.CallId);
                            $("#prvCallId").val(data.CallId);
                            $("#prvCallDate").val(CallDate.getDate() + '/' + month + '/' + CallDate.getFullYear());
                            $("#PrvProblemDescription").val(data.ProblemDescription);
                             month = ProblemDate.getMonth() + 1;
                            $("#ProblemCloseDate").val(ProblemDate.getDate() + '/' + month+ '/' + ProblemDate.getFullYear());
                            month = ExpiryDate.getMonth() + 1;
                            $("#ExpiryDate").val(ExpiryDate.getDate() + '/'+ month+ '/' + ExpiryDate.getFullYear());
                            $("#WStatus").val(data.Status);
                            $("#IsRepeat").text("Yes");
                        }
                    }
                });
            }

        }
  
</script>

