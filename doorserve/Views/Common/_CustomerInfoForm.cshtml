@model doorserve.Models.ClientData.UploadedExcelModel
@Html.HiddenFor(x => x.CustomerId)
@Html.HiddenFor(x => x.ClientId)
@Html.HiddenFor(x => x.DataSourceId)

<div Id="CustomerDT">
    <div class="panel-body b-b-1">

        <h4 class="m-t-10 m-b-5 m-b-10">Customer Information</h4>

        <div class="row">


            <div class="col-sm-12 col-md-9 ">
                <div class="form-group row">

                    <label class="col-sm-3 col-md-2" for="form-control-1"> Mobile <span class="error-alert">*</span> </label>
                    <div class="col-sm-9 col-md-3 ">
                        @Html.TextBoxFor(x => x.CustomerContactNumber, new { @class = "", onchange = "getCustomer()" })
                        @Html.ValidationMessageFor(x => x.CustomerContactNumber, "", new { @class = "text-danger", style = "white-space:nowrap" })
                    </div>


                    <label class="col-sm-4 col-md-2" for="form-control-1"> Customer Type <span class="error-alert">*</span> </label>

                    <div class="col-sm-8 col-md-5">
                        @foreach (var item in Model.CustomerTypeList)
                        {
                            <label class="custom-control custom-control-primary custom-checkbox">
                                @Html.RadioButtonFor(x => x.CustomerTypeId, item.Value, new { @checked = "checked" })
                                <span>@item.Text</span>
                            </label>
                        }

                    </div>
                    @*@Html.ValidationMessageFor(x => x.CustomerTypeId, "", new { @class = "text-danger text-valid" })*@
                </div>
            </div>

            <div class="col-sm-12 col-md-3 ">
                <label class="custom-control custom-control-primary custom-checkbox">
                    @Html.CheckBoxFor(x => x.IsExistingCustomer, new { @class = "custom-control-input" })
                    <span class="custom-control-indicator"></span>
                    <span>Is Existing Customer ?</span>
                </label>
            </div>
        </div>


        <div class="row">
            <div class="form-material fix-overlap">
                <div class="col-sm-6 col-md-3">
                    <div class="form-group has-value">
                        @Html.TextBoxFor(x => x.CustomerName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(x => x.CustomerName, "", new { @class = "text-danger" })
                        <label class="floating-label">Customer Name <span class="error-alert">*</span></label>
                    </div>
                </div>


                <div class="col-sm-6 col-md-3">
                    <div class="form-group has-value">

                        @Html.TextBoxFor(x => x.CustomerEmail, new { @class = "form-control" })
                        @Html.ValidationMessageFor(x => x.CustomerEmail, "", new { @class = "text-danger" })
                        <label class="floating-label">Email <span class="error-alert">*</span></label>
                    </div>
                </div>
                <div class="col-sm-6 col-md-3">
                    <div class="form-group has-value">
                        @Html.TextBoxFor(x => x.CustomerAltConNumber, new { @class = "form-control" })
                        @Html.ValidationMessageFor(x => x.CustomerAltConNumber, "", new { @class = "text-danger" })
                        <label class="floating-label"> Alternative Contact Number</label>
                    </div>
                </div>


                <div class="col-sm-6 col-md-3">
                    <div class="form-group has-value">
                        @Html.TextBoxFor(x => x.Address, new { @class = "form-control" })
                        @Html.ValidationMessageFor(x => x.Address, "", new { @class = "text-danger" })
                        <label class="floating-label">Address</label>
                    </div>
                </div>

            </div>
        </div>

        <div class="form-material fix-overlap">
            <div class="row">
        <div class="col-md-6 col-sm-12 col-xs-12">
            <div class="row form-group has-value">
                <div class="col-md-3 col-sm-3 col-xs-12 "><label class="label-font-500">Address Type</label> </div>
                <div class="col-md-9 col-sm-9 col-xs-12">
                    @foreach (var item in Model.AddressTypelist)
                    {
                        <label class="custom-control custom-control-primary custom-checkbox">
                            @Html.RadioButtonFor(x => x.AddressTypeId, item.Value, new { @checked = "checked" })
                            <span>@item.Text</span>
                        </label>
                    }
                    @*@Html.ValidationMessageFor(x => x.AddressTypeId, "", new { @class = "text-danger text-valid" })*@
                    </div>
                </div>
            </div>

                <div class="col-md-6 col-sm-12">
                    <div class="row">
                        <div class="form-material">
                            <div class="col-sm-6 col-md-6 col-xs-6 ">
                                <div class="form-group has-value">
                                    @Html.TextBoxFor(x => x.NearLocation, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(x => x.NearLocation, "", new { @class = "text-danger" })
                                    <label class="floating-label">Landmark</label>

                                </div>
                            </div>

                            <div class="col-sm-6 col-md-6">
                                <div class="form-group has-value">
                                    @Html.TextBoxFor(x => x.PinNumber, new { @class = "form-control", id = "PinCode", @OnChange = "getLocationByPin()" })
                                    @Html.ValidationMessageFor(x => x.PinNumber, "", new { @class = "text-danger" })
                                    <label class="floating-label">Pincode<span class="error-alert">*</span></label>
                                </div>
                            </div>

                        </div>

                    </div>


                </div>
            </div>
        </div>
        <div class="form-material">
            <div class="row">
                <div class="col-sm-6 col-md-3">
                    <div class="form-group has-value">
                        @Html.DropDownListFor(model => model.LocationId, Model.LocationList, new { @class = "form-control" })
                        @Html.ValidationMessageFor(x => x.LocationId, "", new { @class = "text-danger" })
                        <label class="floating-label  t-0">City <span class="error-alert">*</span></label>
                    </div>
                </div>
                <div class="col-sm-6 col-md-3">
                    <div class="form-group has-value">
                        @Html.TextBoxFor(x => x.District, new { @class = "form-control", id = "District" })
                        @Html.ValidationMessageFor(x => x.District, "", new { @class = "text-danger" })
                        <label class="floating-label  t-0">District</label>
                    </div>
                </div>


                <div class="col-sm-6 col-md-3">
                    <div class="form-group has-value">
                        @Html.TextBoxFor(x => x.State, new { @class = "form-control", id = "State" })
                        <label class="floating-label  t-0">State</label>
                    </div>
                </div>

                <div class="col-sm-6 col-md-3">
                    <div class="form-group has-value">
                        @Html.TextBoxFor(x => x.Country, new { @class = "form-control", id = "Country" })
                        <label class="floating-label t-0">Country</label>
                    </div>
                </div>




            </div>

        </div>

    </div>



</div>


@Scripts.Render("~/bundles/jquery")

<script>

       $("#LocationId").change(function (e) {
                  var locationId = $(this).val();
        if (locationId != '')
            BindAddressByLocation(locationId);
        else {
                          $("#District").val('');
                          $("#Country").val('');    
                          $("#State").val('');
        }

              })
    function getLocationByPin() {
        //console.log("First step");
        var Id = $("#PinCode").val();        
        if (Id.length == 6) {
            $.ajax({
                url: "/DropdownBind/GetLocationByPinCode",
                async: true,
                type: "GET",
                data: { pin: Id },
                contentType: "application/json",
                success: function (result) {
                       $("#District").val('');
                          $("#Country").val('');    
                          $("#State").val('');
                    
                        //$("#District").val(result.District);
                        //$("#State").val(result.State);
                        //$("#Country").val(result.Country);
                        //$("#LocationId").val(result.LocationId);                      
                        var obj = { value: Id, Other: result.LocationId };
                        AjaxWithValue('BindLocationByPinCodeJson', 'LocationId', obj);
                    
                    

                }
            });
        }
        
    };
       function BindAddressByLocation(locationId) {
                  $.ajax({
                      type: "GET",
                      url: '@Url.Action("BindLocationByLocationIdJson","DropdownBind")',
                      data: {"value": locationId},
                      contentType: "application/json; charset=utf-8",
                      dataType: "json",
                      async: true,
                      success: function (data) {
                          $("#District").val(data.DistrictName);
                          $("#Country").val(data.CountryName);
                          $("#State").val(data.StateName);
                      }
                  });
              }
	  
   

</script>
@Scripts.Render("~/bundles/jqueryval")


    