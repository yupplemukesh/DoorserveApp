@model doorserve.Models.Company.AgreementModel

@{
    Layout = null;
}
@Html.HiddenFor(x => x.RefKey)
@Html.HiddenFor(x => x.AGRId)
@Html.HiddenFor(x => x.Action)
<div class="row form-group">
    <!-- Multiple Radios (inline) -->
    @*@Html.HiddenFor(x => x.ServiceType)*@
    <label class="col-md-3 control-label" for="radios">Service Type<span class="error-alert">*</span></label>
    <div class="col-md-9">
        <div class="row">
            @for (int x = 0; x < Model.ServiceList.Count(); x++)
            {

                <div class="col-md-6">
                    <div class="row">
                        <div class="col-md-12">
                            <label class="">
                                @Html.CheckBoxFor(p => p.ServiceList[x].IsChecked)
                                @Html.HiddenFor(p => p.ServiceList[x].Text)
                                @Model.ServiceList[x].Text
                                @Html.HiddenFor(p => p.ServiceList[x].Value)

                            </label>
                        </div>
                    </div>
                </div>

            }
        </div>
    </div>

    <div class="col-md-12 col-md-offset-3">
        @Html.ValidationMessageFor(x => x.ServiceList, "", new { @class = "text-danger" })

    </div>
</div>

            <div class="row form-group">
                @*@Html.HiddenFor(x=>x.ServiceDeliveryType)*@
                <!-- Multiple Radios (inline) -->
                <label class="col-md-3 control-label" for="radios">Service Delivery Type<span class="error-alert">*</span></label>
                @for (int x = 0; x < Model.DeliveryServiceList.Count(); x++)
                {
                    <div class="col-md-2">
                        <label class="" for="radios-0">
                            @Html.CheckBoxFor(p => p.DeliveryServiceList[x].IsChecked)
                            @Html.HiddenFor(p => p.DeliveryServiceList[x].Text)
                            @Model.DeliveryServiceList[x].Text
                            @Html.HiddenFor(p => p.DeliveryServiceList[x].Value)


                        </label>

                    </div>
                }

                <div class="col-md-12 col-md-offset-3">
                    @Html.ValidationMessageFor(x => x.DeliveryServiceList, "", new { @class = "text-danger" })

                </div>


            </div>
            <div class="form-group row">
                <label class="col-sm-3 control-label" for="form-control-1">Agreement Start Date</label>
                <div class="col-sm-9">
                    @Html.TextBoxFor(x => x.AgreementStartDate, "{0:dd/MM/yyyy}", new { @class = "form-control datepicker" })
                    @Html.ValidationMessageFor(model => model.AgreementStartDate, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group row">

                <label class="col-sm-3 control-label" for="form-control-1">Agreement Period </label>
                <div class="col-sm-9">
                    @Html.TextBoxFor(x => x.AgreementPeriod, new { @class = "form-control input-md" })
                    @Html.ValidationMessageFor(model => model.AgreementPeriod, "", new { @class = "text-danger" })
                </div>

            </div>




            <div class="form-group row">
                <label class="col-sm-3 control-label" for="form-control-1">Agreement Number</label>
                <div class="col-sm-9">
                    @Html.TextBoxFor(x => x.AgreementNumber, new { @class = "form-control input-md" })
                    @Html.ValidationMessageFor(model => model.AgreementNumber, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group row">

                <label class="col-sm-3 control-label" for="form-control-1">Upload Agreement</label>
                <div class="col-sm-7">
                    @Html.TextBoxFor(model => model.AgreementPath, htmlAttributes: new { @type = "file", @class = "form-control", @onchange = "readURL(this);", accept = "image/*" })
                    @Html.ValidationMessageFor(model => model.AgreementPath, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-2">
                    @if (!string.IsNullOrEmpty(Model.AgreementFile))
                    {
                        <img id="blah" src="@Model.AgreementFileUrl" class="thumb-Img" alt="your image" />
                    }
                    else
                    {
                        <img id="blah" src="~/Content/img/icon-img/doc-icon.png" class="thumb-Img" alt="your image" />
                    }

                </div>
            </div>


            <div class="form-group row">
                <label class="col-sm-3 control-label" for="form-control-1">Upload Cancelled Cheque</label>
                <div class="col-sm-7">
                    @Html.TextBoxFor(model => model.CancelledChequePath, htmlAttributes: new { @type = "file", @class = "form-control", @onchange = "readURL(this);", accept = "image/*" })
                    @Html.ValidationMessageFor(model => model.CancelledChequePath, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-2">
                    @if (!string.IsNullOrEmpty(Model.CancelledChequeFile))
                    {
                        <img id="blah" src="@Model.CancelledChequeFileUrl" class="thumb-Img" alt="your image" />
                    }
                    else
                    {
                        <img id="blah" src="~/Content/img/icon-img/doc-icon.png" class="thumb-Img" alt="your image" />
                    }
                </div>
            </div>
