@model doorserve.Models.Company.CompanyModel

<div class="form-group row">
    <label class="col-sm-4 control-label" for="form-control-1">Company Type <span class="error-alert">*</span></label>
    <div class="col-sm-8">
        @Html.DropDownListFor(x => x.CompanyTypeId, Model.CompanyTypeList, "Select", new { @class = "form-control input-md", })
        @Html.ValidationMessageFor(model => model.CompanyTypeId, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group row">

    <label class="col-sm-4 control-label" for="form-control-1">Company Code <span class="error-alert">*</span></label>
    <div class="col-sm-3">
        @Html.TextBoxFor(x => x.CompanyCode, new { @class = "form-control input-md", })
        @Html.ValidationMessageFor(model => model.CompanyCode, "", new { @class = "text-danger" })
    </div>
    <label class="col-sm-2 col-md-3 control-label" for="form-control-1">Company Name <span class="error-alert">*</span></label>
    <div class="col-sm-3 col-md-2">
        @Html.TextBoxFor(x => x.CompanyName, new { @class = "form-control input-md" })
        @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group row">
    <label class="col-sm-4 control-label" for="form-control-1">Company Website Domain Name</label>
    <div class="col-sm-3">
        @Html.TextBoxFor(x => x.CompanyWebsiteDomainName, new { @class = "form-control input-md" })
        @Html.ValidationMessageFor(model => model.CompanyWebsiteDomainName, "", new { @class = "text-danger" })
    </div>

    <label class="col-md-3 col-sm-2 control-label" for="form-control-1">Domain Expiry Date</label>
    <div class="col-md-2 col-sm-2">
        @Html.TextBoxFor(x => x.DomainExpiryDate, "{0:dd/MM/yyyy}", new { @class = "form-control input-md datepicker" })
        @Html.ValidationMessageFor(model => model.DomainExpiryDate, "", new { @class = "text-danger" })
    </div>
</div>
<div class="form-group row">
    <label class="col-sm-4 control-label" for="form-control-1">Company Logo</label>
    <div class="col-sm-6">
        @Html.TextBoxFor(model => model.CompanyPath, htmlAttributes: new { @type = "file", @class = "form-control", @onchange = "readURL(this);", accept = "image/*" })
        @Html.ValidationMessageFor(model => model.CompanyPath, "", new { @class = "text-danger" })
    </div>
    <div class="col-sm-2">
        @if (!string.IsNullOrEmpty(Model.CompanyLogo))
        {
            <img id="blah" src="@Model.CompanyFile" class="thumb-Img" alt="your image" />
        }
        else
        {
            <img id="blah" src="~/Content/img/icon-img/logo-uplode.png" class="thumb-Img" alt="your image" />
        }
    </div>

</div>



<div class="form-group row">
    <label class="col-sm-4 control-label" for="form-control-1">Android App Name</label>
    <div class="col-sm-8">
        @Html.TextBoxFor(x => x.AndroidAppName, new { @class = "form-control input-md" })
        @Html.ValidationMessageFor(model => model.AndroidAppName, "", new { @class = "text-danger" })
    </div>
</div>


<div class="form-group row">

    <label class="col-sm-4 control-label" for="form-control-1">Android App Setting</label>
    <div class="col-sm-8">
        @Html.TextAreaFor(x => x.AndroidAppSetting, new { @class = "form-control input-md", @placeholder = "Anroid App Setting" })
        @Html.ValidationMessageFor(model => model.AndroidAppSetting, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group row">

    <label class="col-sm-4 control-label" for="form-control-1">IOS App Name</label>
    <div class="col-sm-8">
        @Html.TextBoxFor(x => x.IOSAppName, new { @class = "form-control input-md" })
        @Html.ValidationMessageFor(model => model.IOSAppName, "", new { @class = "text-danger" })
    </div>
</div>
<div class="form-group row">

    <label class="col-sm-4 control-label" for="form-control-1">IOS App Setting</label>
    <div class="col-sm-8">
        @Html.TextAreaFor(x => x.IOSAppSetting, new { @class = "form-control input-md", @placeholder = "IOS App Setting" })
        @Html.ValidationMessageFor(model => model.IOSAppSetting, "", new { @class = "text-danger" })
    </div>
</div>
<div class="form-group row">
    <label class="col-sm-4 control-label" for="form-control-1">Customer Care Number</label>
    <div class="col-sm-8">
        @Html.TextBoxFor(x => x.CustomerCareNo, new { @class = "form-control input-md" })
        @Html.ValidationMessageFor(model => model.CustomerCareNo, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group row">
    <label class="col-sm-4 control-label" for="form-control-1">Contact Email</label>
    <div class="col-sm-8">
        @Html.TextBoxFor(x => x.ContactEmail, new { @class = "form-control input-md" })
        @Html.ValidationMessageFor(model => model.ContactEmail, "", new { @class = "text-danger" })
    </div>
</div>
<div class="form-group row">
    <label class="col-sm-4 control-label" for="form-control-1">Company Address</label>
    <div class="col-sm-8">
        @Html.TextAreaFor(model => model.CompanyAddress, new { @id = "editor1", @class = "No-border" })
        <script>
             CKEDITOR.config.allowedContent = true;
                    CKEDITOR.replace('editor1', {
                        height: 350,
                        extraPlugins: 'colorbutton,colordialog'
                    });
        </script>
    </div>
</div>
<div class="form-group row">
    <label class="col-sm-4 control-label" for="form-control-1">Social Link</label>
    <div class="col-sm-8">
        @Html.TextAreaFor(model => model.SocialLink, new { @id = "editor2", @class = "No-border" })
        <script>

            CKEDITOR.config.allowedContent = true;
            CKEDITOR.replace('editor2', {
                height: 350,
                extraPlugins: 'colorbutton,colordialog'
            });
        </script>
    </div>
</div>




