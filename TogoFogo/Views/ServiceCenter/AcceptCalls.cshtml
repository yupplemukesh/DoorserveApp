@model TogoFogo.Models.ServiceCenter.ServiceCenterCallsModel
@using TogoFogo.Models
@using GridMvc.Html

@{
    ViewBag.Title = "AcceptCalls";
    Layout = "~/Views/Shared/_LayoutPage1.cshtml";
    var count = 0;
    var count1 = 0;
    var count2 = 0;
}

@helper CustomRenderingOfColumn(TogoFogo.Models.ServiceCenter.CallDetailsModel  calls)
{
if (calls.ServiceCenterId != null)
{
   @Html.ActionLink(calls.ServiceCenterName, "EDIT", "ManageServiceCenters", new { id = calls.ServiceCenterId }, null)    

}
else
{
      @Html.Raw("");

    }
}
<div>
    <div class="panel-heading">
        <div class="row">
            <div class="col-md-12">
                <ul class="nav nav-tabs nav-tabs-custom">
                    <li class="active">
                        <a href="#tab-10" role="tab" data-toggle="tab">
                            <button type="submit" class="btn btn-success m-w-120">Accept Call</button>
                        </a>
                    </li>
                    <li>
                        <a href="#tab-12" role="tab" data-toggle="tab">
                            <button type="submit" class="btn btn-primary m-w-120">Accepted Call</button>
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>


<div class="tab-content">
    <div role="tabpanel" class="tab-pane fade in active" id="tab-10">
        <div class="panel panel-default panel-table">
            <div class="panel-body">
                <div class="panel-default m-b-10">
                    <div class="panel-heading p-l-0">
                        <div class="row">
                            <div class="col-md-6">
                                <h4>Accept Calls</h4>
                            </div>
                            <div class="col-md-6">
                                <span class="pull-right">
                                    <a href="#">
                                        <button type="button" class="btn btn-success btn-sm m-w-120" id="btnaccept">Accept</button>
                                    </a>

                                    <a href="#">
                                        <button type="button" class="btn btn-danger btn-sm m-w-120" data-target="#rejectpopup" id="btnreject">Reject</button>

                                    </a>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel-heading">
                    <div class="row">
                        <div class="col-lg-12">
                            <div class="pull-right">
                                @if (Permissions.Rights.ExcelExport)
                                {
                                    using (Html.BeginForm("ExportToExcel", "ServiceCenter", FormMethod.Get))
                                    {

                                        @Html.Hidden("tabIndex", 'P')
                                        <button type="submit" class="tools-icon btn btn-primary btn-sm excel"> Export to Excel</button>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-horizontal">
                    <div class="tab-content">
                        @if (Permissions.Rights.View)
                        {

                            <div class="table-responsive">
                                <div class="code-cut">
                                    @Html.Grid(Model.PendingCalls).Columns(columns =>
                               {
                         
                                   columns.Add().Titled("<input name='checkBox',checked='false', type='checkBox' onClick='selectedItem(this,\"pendingCalls\")'  />")
                                   .Encoded(false).Sanitized(false).SetWidth(30)
                                   .RenderValueAs(o => Html.CheckBox("checked", false, new { name = "selectedIds", @dataval = o.DeviceId, @class = "chk-item" }));
                                   columns.Add()
                                  .Titled("#SLN")
                                  .SetWidth(10)
                                  .RenderValueAs(o =>
                                  {
                                  count++;
                                  return @<text> @count </text>;
                                  });
                                   columns.Add(c => c.CRN).Titled("Call Id").Filterable(true);
                                   columns.Add(c => c.ClientName).Titled("Client Name").Filterable(true);
                                   columns.Add(c => c.CreatedOn).Titled("Upload Date").Filterable(true);
                                   columns.Add(c => c.ServiceTypeName).Titled("Service Type").Filterable(true);
                                   columns.Add(c => c.CustomerName).Titled("Customer Name").Filterable(true);
                                   columns.Add(c => c.CustomerContactNumber).Titled("Customer Mob").Filterable(true);
                                   columns.Add(c => c.CustomerEmail).Titled("Customer E-mail").Filterable(true);
                                   columns.Add(c => c.CustomerAddress).Titled("Address").Filterable(true);
                                   columns.Add(c => c.CustomerCity).Titled("Location").Filterable(true);
                                   columns.Add(c => c.CustomerPincode).Titled("PinCode").Filterable(true);
                                   columns.Add(c => c.DeviceCategory).Titled("Device Category").Filterable(true);
                                   columns.Add(c => c.DeviceBrand).Titled("Device Brand").Filterable(true);
                                   columns.Add(c => c.DeviceModel).Titled("Device Model").Filterable(true);
                                   columns.Add(c => c.DOP).Titled("Device DOP").Filterable(true);
                                   columns.Add(c => c.PurchaseFrom).Titled("Device Purchase From").Filterable(true);
                                   columns.Add(model => model.ServiceCenterName).Titled("ASC Name")
                                                           .Filterable(true).Sanitized(false).Encoded(false).
                                                            RenderValueAs(o => CustomRenderingOfColumn(o));

                                   columns.Add().Titled("Action")
                                                                        .Filterable(true).Sanitized(false).Encoded(false).
                                                                         RenderValueAs(model => Html.ActionLink("View", "ManageServiceProvidersDetails", new { CRN = model.CRN, Param = "P" }));
                               }).WithPaging(10).Sortable(true)
                                </div>

                            </div>







                        }

                    </div>


                </div>
            </div>
        </div>
    </div>

    <div role="tabpanel" class="tab-pane fade in" id="tab-12">
        <div class="">
            <div class="panel-body">
                <div class="panel-default m-b-10">
                    <div class="p-l-0">
                        <div class="row">
                            <div class="col-md-12">
                                <ul class="nav nav-tabs nav-tabs-custom m-b-15">
                                    <li class="active">
                                        <a href="#tab-17" role="tab" data-toggle="tab">
                                            <button type="submit" class="btn btn-success btn-sm m-w-120">Not Assigned Calls</button>
                                        </a>
                                    </li>
                                    <li>
                                        <a href="#tab-18" role="tab" data-toggle="tab">
                                            <button type="submit" class="btn btn-primary btn-sm  m-w-120">Assigned Calls</button>
                                        </a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab-content">
                    <div role="tabpanel" class="tab-pane fade in active" id="tab-17">
                        <div class="form-horizontal">
                            <div class="panel-default m-b-10">
                                <div class="panel-heading p-l-0">
                                    <div class="row">
                                        <div class="col-md-12">
                                            <h4 class="m-t-0 m-b-5">Assign Call to technician</h4>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group row m-b-0" id="DropDown">
                                <div class="col-sm-3"> <h4>Select Technician</h4></div>
                                <div class="col-sm-5">
                                    @Html.DropDownListFor(x => x.Employee.EmpId, Model.Employee.EmployeeList, "--Select--", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(x => x.Employee.EmpId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="form-horizontal">
                            <div id="TechnicianDetailsForm" style="display:none;">
                                @Html.Partial("_TechnicianDetailsForm", Model.Employee)
                                <div class="col-md-3 col-md-offset-9 text-right">
                                    <button class="btn btn-warning  btn-sm ladda-button" data-style="expand-right" type="button" id="btnback">
                                        <span class="ladda-label">
                                            Back
                                        </span>
                                        <span class="ladda-spinner"></span>
                                    </button>
                                    <button class="btn btn-success btn-sm  ladda-button" data-style="expand-right" id="btnAssign" type="button">
                                        <span class="ladda-label">Assign to technician</span>
                                        <span class="ladda-spinner"></span>
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="panel-heading">
                            <div class="row">
                                <div class="col-lg-12 m-t-15">
                                    <div class="pull-right">
                                        @if (Permissions.Rights.ExcelExport)
                                        {
                                            using (Html.BeginForm("ExportToExcel", "ServiceCenter", FormMethod.Get))
                                            {

                                                @Html.Hidden("tabIndex", 'A')
                                                <button type="submit" class="tools-icon btn btn-primary btn-sm excel"> Export to Excel</button>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-horizontal">
                            <div class="table-responsive">
                                <div class="code-cut">
                                    @Html.Grid(Model.AcceptedCalls).Columns(columns => {
                                   columns.Add().Titled("<input name='checkBox',checked='false', type='checkBox' onClick='selectedItem(this,\"acceptedCalls\")'  />")
                                   .Encoded(false).Sanitized(false).SetWidth(30)
                                   .RenderValueAs(o => Html.CheckBox("checked", false, new { name = "selectedIds", @dataval = o.DeviceId, @class = "chk-item" }));
                                   columns.Add()
                                  .Titled("#SLN")
                                  .SetWidth(10)
                                  .RenderValueAs(o =>
                                  {
                                  count1++;
                                  return @<text> @count1 </text>;
                                  });
                                   columns.Add(c => c.CRN).Titled("Call Id").Filterable(true);
                                   columns.Add(c => c.ClientName).Titled("Client Name").Filterable(true);
                                   columns.Add(c => c.CreatedOn).Titled("Upload Date").Filterable(true);
                                   columns.Add(c => c.ServiceTypeName).Titled("Service Type").Filterable(true);
                                   columns.Add(c => c.CustomerName).Titled("Customer Name").Filterable(true);
                                   columns.Add(c => c.CustomerContactNumber).Titled("Customer Mob").Filterable(true);
                                   columns.Add(c => c.CustomerEmail).Titled("Customer E-mail").Filterable(true);
                                   columns.Add(c => c.CustomerAddress).Titled("Address").Filterable(true);
                                   columns.Add(c => c.CustomerCity).Titled("Location").Filterable(true);
                                   columns.Add(c => c.CustomerPincode).Titled("PinCode").Filterable(true);
                                   columns.Add(c => c.DeviceCategory).Titled("Device Category").Filterable(true);
                                   columns.Add(c => c.DeviceBrand).Titled("Device Brand").Filterable(true);
                                   columns.Add(c => c.DeviceModel).Titled("Device Model").Filterable(true);
                                   columns.Add(c => c.DOP).Titled("Device DOP").Filterable(true);
                                   columns.Add(c => c.PurchaseFrom).Titled("Device Purchase From").Filterable(true);
                                   columns.Add(model => model.ProviderName).Titled("Provider Name")
                                   .Filterable(true).Sanitized(false).Encoded(false).
                                   RenderValueAs(model => Html.ActionLink(model.ProviderName, "EDIT", "ManageServiceProviders", new { id = model.providerId }, null));
                                   columns.Add(model => model.ServiceCenterName).Titled("ASC Name")
                                   .Filterable(true).Sanitized(false).Encoded(false).
                               RenderValueAs(o => CustomRenderingOfColumn(o));
                                   columns.Add().Titled("Action")
      .Filterable(true).Sanitized(false).Encoded(false).
      RenderValueAs(model => Html.ActionLink("View", "ManageServiceProvidersDetails", new { CRN = model.CRN, Param = "A" }));
                               }).WithPaging(10).Sortable(true)
                                </div>
                            </div>
                        </div>


                    </div>
                    <div role="tabpanel" class="tab-pane fade in" id="tab-18">
                        <div class="panel-heading">
                            <div class="row">
                                <div class="col-lg-12">
                                    <div class="pull-right">
                                        @if (Permissions.Rights.ExcelExport)
                                        {
                                            using (Html.BeginForm("ExportToExcel", "ServiceCenter", FormMethod.Get))
                                            {

                                                @Html.Hidden("tabIndex", 'C')
                                                <button type="submit" class="tools-icon btn btn-primary btn-sm excel"> Export to Excel</button>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-horizontal">
                            <div class="table-responsive">
                                <div class="code-cut">
                                    @Html.Grid(Model.AssignedCalls).Columns(columns => {
                                   columns.Add()
                                  .Titled("#SLN")
                                  .SetWidth(10)
                                  .RenderValueAs(o =>
                                  {
                                  count2++;
                                  return @<text> @count2 </text>;
     });
      columns.Add(c => c.CRN).Titled("Call Id").Filterable(true);
      columns.Add(c => c.ClientName).Titled("Client Name").Filterable(true);
      columns.Add(c => c.CreatedOn).Titled("Upload Date").Filterable(true);
      columns.Add(c => c.ServiceTypeName).Titled("Service Type").Filterable(true);
      columns.Add(c => c.CustomerName).Titled("Customer Name").Filterable(true);
      columns.Add(c => c.CustomerContactNumber).Titled("Customer Mob").Filterable(true);
      columns.Add(c => c.CustomerEmail).Titled("Customer E-mail").Filterable(true);
      columns.Add(c => c.CustomerAddress).Titled("Address").Filterable(true);
      columns.Add(c => c.CustomerCity).Titled("Location").Filterable(true);
      columns.Add(c => c.CustomerPincode).Titled("PinCode").Filterable(true);
      columns.Add(c => c.DeviceCategory).Titled("Device Category").Filterable(true);
      columns.Add(c => c.DeviceBrand).Titled("Device Brand").Filterable(true);
      columns.Add(c => c.DeviceModel).Titled("Device Model").Filterable(true);
      columns.Add(c => c.DOP).Titled("Device DOP").Filterable(true);
      columns.Add(c => c.PurchaseFrom).Titled("Device Purchase From").Filterable(true);
      columns.Add(model => model.ProviderName).Titled("Provider Name")
      .Filterable(true).Sanitized(false).Encoded(false).
      RenderValueAs(model => Html.ActionLink(model.ProviderName, "EDIT", "ManageServiceProviders", new { id = model.providerId }, null));
      columns.Add(model => model.ServiceCenterName).Titled("ASC Name")
      .Filterable(true).Sanitized(false).Encoded(false).
      RenderValueAs(model => CustomRenderingOfColumn(model));
      columns.Add().Titled("Technician Name")
       .Filterable(true).Sanitized(false).Encoded(false).
        RenderValueAs(model => Html.ActionLink(model.TechnicianName, "Edit", "Employees", new { empId = model.EmpId }, null));
                                    columns.Add().Titled("Action")
      .Filterable(true).Sanitized(false).Encoded(false).
      RenderValueAs(model => Html.ActionLink("View", "ManageServiceProvidersDetails", new { CRN = model.CRN, Param = "A" }));

           
  }).WithPaging(10).Sortable(true)
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>
<div id="rejectpopup" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <div class="form-group col-md-12" id="rejectResonDiv">
                    <label for="form-control-3" class="col-sm-3 col-md-3 control-label">Rejected Reason</label>
                    <div class="col-sm-8 col-md-8">

                        @Html.TextAreaFor(model => model.CallDetails.RejectionReason, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CallDetails.RejectionReason, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" id="btnrejectreasion" class="btn btn-primary">Submit</button>
                <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section scripts{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/js/form-m")
    @Scripts.Render("~/bundles/js/ui-buttons")
    <script>
            $("#chkAll").on("click", function (e) {
                $(".chk-item").prop('checked', $(this).prop("checked"));
        });


        $("#btnback").on("click", function () {
            $("#TechnicianDetailsForm").hide();
            $("#DropDown").show();
        });


        $("#btnreject").click(function () {
            $("#CallDetails_RejectionReason").val("");
            var checkboxcount = 0;
            $('.grid-wrap >.grid-table > tbody  > tr').each(function () {
                var check = $(this).find('[type=checkbox]');
                if ($(check).prop("checked")) {
                    checkboxcount++;
                }
            });

            if (checkboxcount > 0) {
                $("#rejectpopup").modal("show");
            }
            else {
                alert("please select a checkbox");
                $("#rejectpopup").modal("hide");
                return false;
            }

        });
        $("#btnrejectreasion").click(function () {

            var statusId = 9;
            var rejectionReasion = $("#CallDetails_RejectionReason").val();


            if (statusId == 9) {
                debugger
                if (rejectionReasion.length == 0) {
                    $('.toast-error').show();
                    $('.toast-error > .toast-message').html("Rejection Reasion Required");
                    $("#toast-container").fadeIn();
                    $("#toast-container").fadeOut(2000);
                    return false;
                }
                else {
                    $('.toast-error').hide();

                  }

            }
            var obj = [];
            $('.grid-wrap >.grid-table > tbody  > tr').each(function () {
                debugger
                var check = $(this).find('[type=checkbox]');
                if ($(check).prop("checked")) {
                    var deviceId = $(check).attr("dataval");
                    var item = { DeviceId: deviceId};
                    obj.push(item);
                }
            });




        var data = {
            StatusId: statusId, RejectionReason: rejectionReasion,  SelectedDevices: obj
                  }
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("CallStatus", "ServiceCenter")',
                    data: data,
                    dataType: "json",
                    success: function (resultData) {
                        console.log(resultData);
                        if (resultData == "Ok")
                            window.location.reload();

                    },
                    error: (function () {
                        alert("Something went wrong");
                    })
                });


        });

        $("#btnaccept").click(function () {

            var checkboxcount = 0;
            $('.grid-wrap >.grid-table > tbody  > tr').each(function () {

                var check = $(this).find('[type=checkbox]');
                if ($(check).prop("checked")) {
                    checkboxcount++;
                }
            });

            if (checkboxcount > 0) {


                var statusId = 11;

                var obj = [];
                $('.grid-wrap >.grid-table > tbody  > tr').each(function () {
                    debugger
                    var check = $(this).find('[type=checkbox]');
                    if ($(check).prop("checked")) {
                        var deviceId = $(check).attr("dataval");
                        var item = { DeviceId: deviceId };
                        obj.push(item);
                    }
                });

                var data = {
                    StatusId: statusId, RejectionReason: "", SelectedDevices: obj
                }
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("CallStatus", "ServiceCenter")',
                    data: data,
                    dataType: "json",
                    success: function (resultData) {
                        console.log(resultData);
                        if (resultData == "Ok")
                            window.location.reload();

                    },
                    error: (function () {
                        alert("Something went wrong");
                    })
                });
            }
            else {
                alert("please select a checkbox")
                return false;
            }

        });
        $("#btnAssign").click(function () {
           var checkboxcount = 0;
            $('.grid-wrap >.grid-table > tbody  > tr').each(function () {

                var check = $(this).find('[type=checkbox]');
                if ($(check).prop("checked")) {
                    checkboxcount++;
                }
            });

            if (checkboxcount > 0) {
                debugger
                var empID = $("#Employee_EmpId").val();

                var obj = [];
                $('.grid-wrap >.grid-table > tbody  > tr').each(function () {
                    debugger
                    var check = $(this).find('[type=checkbox]');
                    if ($(check).prop("checked")) {
                        var deviceId = $(check).attr("dataval");
                        var item = { DeviceId: deviceId };
                        obj.push(item);
                    }
                });
                var data = {
                    EmpId: empID,SelectedDevices: obj
                }
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("AssignCalls", "ServiceCenter")',
                    data: data,
                    dataType: "json",
                    success: function (resultData) {
                        console.log(resultData);
                        if (resultData == "Ok")
                            window.location.reload();

                    },
                    error: (function () {
                        alert("Something went wrong");
                    })
                });
            }
            else {
                alert("please select a checkbox")
                return false;
            }
        });

        $("#Employee_EmpId").change(function () {
            var Id = $("#Employee_EmpId").val();

            $.ajax({
                type: "GET",
                url: "/ServiceCenter/TechnicianDetails",
                data: {
                    EmpId: Id
                },
                success: function (response) {
                    console.log(response);
                    $("#EmpId").val(response.EmpId);
                    $("#TechnicianTypeName").val(response.TechnicianTypeName);
                    $("#TechnicianName").val(response.TechnicianName);
                    $("#ContactNumber").val(response.ConMobileNumber);

                    if (response.EMPPhoto != null || response.EMPPhoto != "") {
                        $("#EmpImg").prop("src",  response.EMPPhotoUrl);
                    }
                    $("#TotalOpenCalls").val(response.TotalOpenCalls);
                    $("#TotalCloseCalls").val(response.TotalCloseCalls);
                    $("#Vehicle_VehicleTypeName").val(response.Vehicle.VehicleTypeName);
                    $("#Vehicle_VehicleBrand").val(response.Vehicle.VehicleBrand);
                    $("#Vehicle_VHModel").val(response.Vehicle.VHModel);
                    $("#Vehicle_VHNumber").val(response.Vehicle.VHNumber);
                    $("#Vehicle_DrivingLicense").val(response.Vehicle.DrivingLicense);
                    if(response.Vehicle.InsuranceExpairyDate !=null)
                    $("#Vehicle_InsuranceExpairyDate").val(new Date(parseInt(response.Vehicle.InsuranceExpairyDate.substr(6))));
                    console.log(response);
                },
                error: function (e) {
                    console.log(e);
                    alert("Something went wrong...");
                },
                complete: function () {
                    $("#TechnicianDetailsForm").show();
                    $("#DropDown").hide();
                }
            })

        });

        function selectedItem(elm, str) {
                if (str == 'acceptedCalls')
                    $(".chk-item").prop('checked', $(elm).prop("checked"));
            else if (str=='pendingCalls')
                    $(".chk-item").prop('checked', $(elm).prop("checked"));
            else if (str == 'rejectedCalls')
                    $(".chk-item").prop('checked', $(elm).prop("checked"));
        }





    </script>

}


