@model TogoFogo.Models.ServiceCenter.ServiceCenterCallsModel
@using TogoFogo.Models
@using GridMvc.Html

@{
    ViewBag.Title = "AcceptCalls";
    Layout = "~/Views/Shared/_LayoutPage1.cshtml";
    var count = 0;
    var count1 = 0;
   // var count2 = 1;
}


<div>

    <div class="panel-heading">

        <div class="row">

            <div class="col-md-12">
                <ul class="nav nav-tabs">


                    <li class="active">
                        <a href="#tab-10" role="tab" data-toggle="tab">
                            <button type="submit" class="btn btn-success m-w-120">Accept Call</button>
                        </a>
                    </li>
                    <li>
                        <a href="#tab-12" role="tab" data-toggle="tab">
                            <button type="submit" class="btn btn-primary m-w-120">Accepted Call</button>
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>


<div class="tab-content">
    <div role="tabpanel" class="tab-pane fade in active" id="tab-10">
        <div class="panel panel-default panel-table">
            <div class="panel-body">
                <div class="panel-default m-b-10">
                    <div class="panel-heading p-l-0">
                        <div class="row">
                            <div class="col-md-9">
                                <h4>Accept Calls</h4>
                            </div>
                            <div class="col-md-3">
                                <span>
                                    <a href="#">
                                        <button type="button" class="btn btn-success m-w-120" id="btnaccept">Accept</button>
                                    </a>
                                </span>
                                <span>
                                    <a href="#">
                                        <button type="button" class="btn btn-danger m-w-120" data-target="#rejectpopup" id="btnreject">Reject</button>

                                    </a>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>


                <div class="form-horizontal">

                    <div class="tab-content">
                        @if (Permissions.Rights.View)
                        {

                            <div class="table-responsive">
                                <div class="code-cut">
                                    @Html.Grid(Model.PendingCalls).Columns(columns =>
                               {
                                   columns.Add().Titled("<input name='checkBox',checked='false', type='checkBox' onClick='selectedItem(this,\"pendingCalls\")'  />")
                                   .Encoded(false).Sanitized(false).SetWidth(30)
                                   .RenderValueAs(o => Html.CheckBox("checked", false, new { name = "selectedIds", @dataval = o.DeviceId, @class = "chk-item" }));
                                   columns.Add()
                                  .Titled("#SLN")
                                  .SetWidth(10)
                                  .RenderValueAs(o =>
                                  {
                                  count++;
                                  return @<text> @count </text>;
         });
          columns.Add(c => c.CRN).Titled("Call Id").Filterable(true);
          columns.Add(c => c.ClientName).Titled("Client Name").Filterable(true);
          columns.Add(c => c.CreatedOn).Titled("Upload Date").Filterable(true);
          columns.Add(c => c.ServiceTypeName).Titled("Service Type").Filterable(true);
          columns.Add(c => c.CustomerName).Titled("Customer Name").Filterable(true);
          columns.Add(c => c.CustomerContactNumber).Titled("Customer Mob").Filterable(true);
          columns.Add(c => c.CustomerEmail).Titled("Customer E-mail").Filterable(true);
          columns.Add(c => c.CustomerAddress).Titled("Address").Filterable(true);
          columns.Add(c => c.CustomerCity).Titled("Location").Filterable(true);
          columns.Add(c => c.CustomerPincode).Titled("PinCode").Filterable(true);
          columns.Add(c => c.DeviceCategory).Titled("Device Category").Filterable(true);
          columns.Add(c => c.DeviceBrand).Titled("Device Brand").Filterable(true);
          columns.Add(c => c.DeviceModel).Titled("Device Model").Filterable(true);
          columns.Add(c => c.DOP).Titled("Device DOP").Filterable(true);
          columns.Add(c => c.PurchaseFrom).Titled("Device Purchase Form").Filterable(true);
          columns.Add(model => model.ProviderName).Titled("ASC Name")
                                                              .Filterable(true).Sanitized(false).Encoded(false).
                                                               RenderValueAs(model => Html.ActionLink("Edit", "ManageServiceProviders", new { productID = model.providerId }, null));
          columns.Add().Titled("Action")
                                .Filterable(true).Sanitized(false).Encoded(false).
                                 RenderValueAs(model => Html.ActionLink("View", "ManageServiceProvidersDetails", new { CRN = model.CRN }));
      }).WithPaging(10).Sortable(true)
                                </div>

                            </div>







                        }

                    </div>


                </div>


            </div>
        </div>
    </div>
    <div role="tabpanel" class="tab-pane fade in" id="tab-12">

            <div class="panel panel-default panel-table">

                <div class="panel-body">



                    <div class="panel-default m-b-10">
                        <div class="panel-heading p-l-0">
                            <div class="row">
                                <div class="col-md-12">
                                    <ul class="nav nav-tabs">
                                        <li class="active">
                                            <a href="#tab-17" role="tab" data-toggle="tab">
                                                <button type="submit" class="btn btn-success m-w-120">Not Assigned Calls</button>
                                            </a>
                                        </li>
                                        <li>
                                            <a href="#tab-18" role="tab" data-toggle="tab">
                                                <button type="submit" class="btn btn-primary m-w-120">Assigned Calls</button>
                                            </a>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-content">
                        <div role="tabpanel" class="tab-pane fade in active" id="tab-17">
                            <div class="form-horizontal">

                                <div >
                                    <div >

                                        <div class="panel-default m-b-10">
                                            <div class="panel-heading p-l-0">

                                                <div class="row">

                                                    <div class="col-md-12">
                                                        <h4 class="m-t-0 m-b-5">Assign Call to technician</h4>
                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-horizontl">
                                            <div class="panel-heading">
            <div class="row">
                <div class="col-md-12">
                    <div class="form-horizontal">
                        <div class="panel-body">
                            <div class="form-horizontal">
                                <div class="form-group row m-b-0">
                                    <div class="col-sm-2 p-l-0"> <h4>Select Technician</h4></div>
                                    <div class="col-sm-5">
                                        @Html.DropDownListFor(x => x.employee.EmpId, Model.employee.EmployeeList, "--Select--", new { @class = "form-control"})
                                        @Html.ValidationMessageFor(x => x.employee.EmpId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

                                            @Html.Partial("_TechnicianDetailsForm", Model)


                                        </div>



                                    </div>
                                </div>


                            </div>

                        </div>
                        <div role="tabpanel" class="tab-pane fade in" id="tab-18">

                        </div>
                    </div>
                </div>
            </div>
            <div class="panel panel-default panel-table">
                <div class="panel-body">
                    <div class="form-horizontal">
                        <div class="table-responsive">
                            <div class="code-cut">
                                @Html.Grid(Model.AcceptedCalls).Columns(columns => {
                               columns.Add().Titled("<input name='checkBox',checked='false', type='checkBox' onClick='selectedItem(this,\"acceptedCalls\")'  />")
                               .Encoded(false).Sanitized(false).SetWidth(30)
                               .RenderValueAs(o => Html.CheckBox("checked", false, new { name = "selectedIds", @dataval = o.DeviceId, @class = "chk-item" }));
                               columns.Add()
                              .Titled("#SLN")
                              .SetWidth(10)
                              .RenderValueAs(o =>
                              {
                              count1++;
                              return @<text> @count1 </text>;
                              });
                               columns.Add(c => c.CRN).Titled("Call Id").Filterable(true);
                               columns.Add(c => c.ClientName).Titled("Client Name").Filterable(true);
                               columns.Add(c => c.CreatedOn).Titled("Upload Date").Filterable(true);
                               columns.Add(c => c.ServiceTypeName).Titled("Service Type").Filterable(true);
                               columns.Add(c => c.CustomerName).Titled("Customer Name").Filterable(true);
                               columns.Add(c => c.CustomerContactNumber).Titled("Customer Mob").Filterable(true);
                               columns.Add(c => c.CustomerEmail).Titled("Customer E-mail").Filterable(true);
                               columns.Add(c => c.CustomerAddress).Titled("Address").Filterable(true);
                               columns.Add(c => c.CustomerCity).Titled("Location").Filterable(true);
                               columns.Add(c => c.CustomerPincode).Titled("PinCode").Filterable(true);
                               columns.Add(c => c.DeviceCategory).Titled("Device Category").Filterable(true);
                               columns.Add(c => c.DeviceBrand).Titled("Device Brand").Filterable(true);
                               columns.Add(c => c.DeviceModel).Titled("Device Model").Filterable(true);
                               columns.Add(c => c.DOP).Titled("Device DOP").Filterable(true);
                               columns.Add(c => c.PurchaseFrom).Titled("Device Purchase Form").Filterable(true);
                               columns.Add(model => model.ProviderName).Titled("Provider Name")
                               .Filterable(true).Sanitized(false).Encoded(false).
                               RenderValueAs(model => Html.ActionLink("Edit", "ManageServiceProviders", new { productID = model.providerId }, null));
                               columns.Add(model => model.ServiceCenterName).Titled("ASC Name")
                               .Filterable(true).Sanitized(false).Encoded(false).
                               RenderValueAs(model => Html.ActionLink("Edit", "ManageServiceCenters", new { serviceCenterId = model.ServiceCenterId }, null));
                           }).WithPaging(10).Sortable(true)
                            </div>
                        </div>

                    </div>
                </div>
            </div>

    </div>
</div>
<div id="rejectpopup" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">            
            <div class="modal-body">
                <div class="form-group col-md-12"  id="rejectResonDiv">
                    <label for="form-control-3" class="col-sm-3 col-md-3 control-label">Rejected Reason</label>
                    <div class="col-sm-8 col-md-8">

                        @Html.TextAreaFor(model => model.CallDetails.RejectionReason, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CallDetails.RejectionReason, "", new { @class = "text-danger" })
                    </div>



                </div>

                

            </div>
            <div class="modal-footer">
                <button type="button" id="btnrejectreasion" class="btn btn-primary">Submit</button>
                <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>

@section scripts{
    @Scripts.Render("~/bundles/jqueryval")

    <script>
            $("#chkAll").on("click", function (e) {                
                $(".chk-item").prop('checked', $(this).prop("checked"));
        });


        $("#btnreject").click(function () {
            $("#CallDetails_RejectionReason").val("");
            var checkboxcount = 0;
            $('.grid-wrap >.grid-table > tbody  > tr').each(function () {
                var check = $(this).find('[type=checkbox]');
                if ($(check).prop("checked")) {
                    checkboxcount++;
                }
            });

            if (checkboxcount > 0) {
                $("#rejectpopup").modal("show");
            }
            else {
                alert("please select a checkbox");
                $("#rejectpopup").modal("hide");
                return false;
            }

        });
        $("#btnrejectreasion").click(function () {
                 
            var statusId = 9;
            var rejectionReasion = $("#CallDetails_RejectionReason").val();


            if (statusId == 9) {
                debugger
                if (rejectionReasion.length == 0) {
                    $('.toast-error').show();
                    $('.toast-error > .toast-message').html("Rejection Reasion Required");
                    $("#toast-container").fadeIn();
                    $("#toast-container").fadeOut(2000);
                    return false;
                }
                else {
                    $('.toast-error').hide();

                  }

            }
            var obj = [];
            $('.grid-wrap >.grid-table > tbody  > tr').each(function () {
                debugger
                var check = $(this).find('[type=checkbox]');
                if ($(check).prop("checked")) {
                    var deviceId = $(check).attr("dataval");
                    var item = { DeviceId: deviceId};
                    obj.push(item);
                }
            });




        var data = {
            StatusId: statusId, RejectionReason: rejectionReasion,  SelectedDevices: obj
                  }
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("CallStatus", "ServiceCenter")',
                    data: data,
                    dataType: "json",
                    success: function (resultData) {
                        console.log(resultData);
                        if (resultData == "Ok")
                            window.location.reload();

                    },
                    error: (function () {
                        alert("Something went wrong");
                    })
                });
            

        });

        $("#btnaccept").click(function () {

            var checkboxcount = 0;
            $('.grid-wrap >.grid-table > tbody  > tr').each(function () {
                
                var check = $(this).find('[type=checkbox]');
                if ($(check).prop("checked")) {
                    checkboxcount++;
                }
            });

            if (checkboxcount > 0) {


                var statusId = 11;

                var obj = [];
                $('.grid-wrap >.grid-table > tbody  > tr').each(function () {
                    debugger
                    var check = $(this).find('[type=checkbox]');
                    if ($(check).prop("checked")) {
                        var deviceId = $(check).attr("dataval");
                        var item = { DeviceId: deviceId };
                        obj.push(item);
                    }
                });

                var data = {
                    StatusId: statusId, RejectionReason: "", SelectedDevices: obj
                }
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("CallStatus", "ServiceCenter")',
                    data: data,
                    dataType: "json",
                    success: function (resultData) {
                        console.log(resultData);
                        if (resultData == "Ok")
                            window.location.reload();

                    },
                    error: (function () {
                        alert("Something went wrong");
                    })
                });
            }
            else {
                alert("please select a checkbox")
                return false;
            }

        });     
        $("#btnAssign").click(function () {
           var checkboxcount = 0;
            $('.grid-wrap >.grid-table > tbody  > tr').each(function () {
                
                var check = $(this).find('[type=checkbox]');
                if ($(check).prop("checked")) {
                    checkboxcount++;
                }
            });

            if (checkboxcount > 0) {
                var empID = $(this).attr("empId");

                var obj = [];
                $('.grid-wrap >.grid-table > tbody  > tr').each(function () {
                    debugger
                    var check = $(this).find('[type=checkbox]');
                    if ($(check).prop("checked")) {
                        var deviceId = $(check).attr("dataval");
                        var item = { DeviceId: deviceId };
                        obj.push(item);
                    }
                });
                var data = {
                    EmpId: empID,SelectedDevices: obj
                }
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("AssignCalls", "ServiceCenter")',
                    data: data,
                    dataType: "json",
                    success: function (resultData) {
                        console.log(resultData);
                        if (resultData == "Ok")
                            window.location.reload();

                    },
                    error: (function () {
                        alert("Something went wrong");
                    })
                });
            }
            else {
                alert("please select a checkbox")
                return false;
            }  
        });

        $("#employee_EmpId").change(function () {
            debugger;
            var Id = $("#employee_EmpId").val();

            $.ajax({
                type: "POST",
                url: "/ServiceCenter/TechnicianDetails",
                data: {
                    EmpId: Id
                },
                success: function (response) {
                    $("#employee_EMPId").val(response.empID);
                    $("#employee_TechnicianTypeName").val(response.TechnicianTypeName);
                    $("#employee_TechnicianName").val(response.Contact.TechnicianName);
                    $("#employee_ContactNumber").val(response.Contact.ConMobileNumber);
                    $("#employee_Vehicle_VehicleTypeName").val(response.Vehicle.VehicleTypeName);
                    $("#employee_Vehicle_VehicleBrand").val(response.Vehicle.VehicleBrand);
                    $("#employee_Vehicle_VHModel").val(response.Vehicle.VHModel);
                    $("#employee_Vehicle_RcNumber").val(response.Vehicle.RcNumber);
                    $("#employee_Vehicle_DrivingLicense").val(response.Vehicle.DrivingLicense);
                    $("#employee_Vehicle_InsuranceExpairyDate").val(new Date(response.Vehicle.InsuranceExpairyDate));
                    console.log(response);
                },
                error: function (e) {
                    console.log(e);
                    alert("Something went wrong...");
                },
                complete: function () {

                }
            })

        });

        function selectedItem(elm, str) {
                if (str == 'acceptedCalls')
                    $(".chk-item").prop('checked', $(elm).prop("checked"));
            else if (str=='pendingCalls')
                    $(".chk-item").prop('checked', $(elm).prop("checked"));
            else if (str == 'rejectedCalls')
                    $(".chk-item").prop('checked', $(elm).prop("checked"));
        }

    </script>

}


