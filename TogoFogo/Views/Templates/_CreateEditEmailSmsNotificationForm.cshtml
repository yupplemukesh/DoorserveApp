@model TogoFogo.Models.Template.TemplateModel

<div class="row">
    <div class="col-md-6 form-group">
        <label class=" control-label" for="form-control-9">Mailer Template Type</label>
        @Html.HiddenFor(model => model.TemplateId)
        @Html.HiddenFor(model => model.MailerTemplateName)
        @Html.HiddenFor(model => model.GUID)
        @Html.DropDownListFor(model => model.TemplateTypeId, Model.TemplateTypeList, "Select", new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.TemplateTypeId, "", new { @class = "text-danger" })
    </div>


    @if (!string.IsNullOrEmpty(Model.ActionTypeName) && Model.ActionTypeName.ToLower() == "actionbased")
    {

        <div class="col-md-6 form-group" id="actions">
            <label class=" control-label" for="form-control-9">Action Type</label>
            @Html.DropDownListFor(model => model.ActionTypeId, Model.ActionTypeList, "Select", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ActionTypeId, "", new { @class = "text-danger" })
        </div>
    }
    else
    {

        <div class="col-md-6 form-group hidden" id="actions">
            <label class=" control-label" for="form-control-9">Action Type</label>
            @Html.DropDownListFor(model => model.ActionTypeId, Model.ActionTypeList, "Select", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ActionTypeId, "", new { @class = "text-danger" })
        </div>

    }
</div>
<div class="row">
    <div class="col-md-6 form-group">
        <label class=" control-label" for="form-control-9"> Template Name </label>
        <div class="form-group">
            @Html.HiddenFor(model => model.MessageTypeName)
            @Html.TextBoxFor(model => model.TemplateName, new { @class = "form-control input-md", @placeholder = "Mailer Template Name" })
            @Html.ValidationMessageFor(model => model.TemplateName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="col-md-6 form-group">
        <label class=" control-label" for="form-control-9">Message Type </label>
        <div class="form-group">
            @Html.DropDownListFor(model => model.MessageTypeId, Model.MessageTypeList, "Select", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.MessageTypeId, "", new { @class = "text-danger" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6 form-group" id="mailerGateway">
        <label class=" control-label" for="form-control-9">Mailer Gateway</label>
        <div class="form-group">
            @Html.DropDownListFor(model => model.GatewayId, Model.GatewayList, "Select", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.GatewayId, "", new { @class = "text-danger" })
        </div>
    </div>
    @if (!string.IsNullOrEmpty(Model.ActionTypeName) && Model.MessageTypeName == "SMTP Gateway")
    {
        <div class="col-md-6 form-group" id="header">
            <label class=" control-label" for="form-control-9">Header Footer Template</label>
            <div class="form-group">
                @Html.DropDownListFor(model => model.EmailHeaderFooterId, Model.EmailHeaderFooterList, "Select", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.EmailHeaderFooterId, "", new { @class = "text-danger" })
            </div>
        </div>
    }
    else
    {
        <div class="col-md-6 form-group hidden" id="header">
            <label class=" control-label" for="form-control-9">Header Footer Template</label>
            <div class="form-group">
                @Html.DropDownListFor(model => model.EmailHeaderFooterId, Model.EmailHeaderFooterList, "Select", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.EmailHeaderFooterId, "", new { @class = "text-danger" })
            </div>
        </div>
    }
</div>
<div class="row">
    @if (!string.IsNullOrEmpty(Model.ActionTypeName) && Model.MessageTypeName == "SMTP Gateway" && Model.ActionTypeName.ToLower() == "actionbased")
    {
        <div class="col-md-6 form-group" id="bccEmail">
            <label class=" control-label" for="form-control-9">BCC Email ID</label>
            @Html.TextBoxFor(model => model.BccEmails, new { @class = "form-control input-md", @placeholder = "BCC Email ID" })
            @Html.ValidationMessageFor(model => model.BccEmails, "", new { @class = "text-danger" })
        </div>
    }
    else
    {
        <div class="col-md-6 form-group hidden" id="bccEmail">
            <label class=" control-label" for="form-control-9">BCC Email ID</label>
            @Html.TextBoxFor(model => model.BccEmails, new { @class = "form-control input-md", @placeholder = "BCC Email ID" })
            @Html.ValidationMessageFor(model => model.BccEmails, "", new { @class = "text-danger" })
        </div>

    }

    @if (!string.IsNullOrEmpty(Model.ActionTypeName) && Model.MessageTypeName == "SMTP Gateway")
    {
        <div class="col-md-6 form-group" id="emailSubject">
            <label class=" control-label" for="form-control-9">Email Subject</label>
            @Html.TextBoxFor(model => model.Subject, new { @class = "form-control input-md", @placeholder = "Email Subject" })
            @Html.ValidationMessageFor(model => model.Subject, "", new { @class = "text-danger" })
        </div>
    }
    else
    {
        <div class="col-md-6 form-group hidden" id="emailSubject">
            <label class=" control-label" for="form-control-9">Email Subject</label>
            @Html.TextBoxFor(model => model.Subject, new { @class = "form-control input-md", @placeholder = "Email Subject" })
            @Html.ValidationMessageFor(model => model.Subject, "", new { @class = "text-danger" })
        </div>

    }
</div>
<div class="row">
    @if (!string.IsNullOrEmpty(Model.ActionTypeName) && Model.MessageTypeName == "SMTP Gateway" && Model.ActionTypeName.ToLower() == "nonactionbased")
    {
        <div class="col-md-6 form-group" id="toEmail">
            <label class=" control-label" for="form-control-9">To Email</label>
            <div class="form-group">
                @Html.TextBoxFor(model => model.ToEmail, new { @placeholder = "To Email", @class = "form-control" })
            </div>
            <div id="totalEmail"><a href="javascript:void(0)" id="popupEmailList" data-guid="@Model.GUID">Total Count:<span> @(Model.TotalCount)</span> </a></div>
        </div>
        <div class="col-md-6 form-group" id="uploadToEmail">
            @Html.Label("Browse File Email", htmlAttributes: new { @class = "control-label", @for = "form-control-9" })
            <div class="form-group">
                @Html.TextBoxFor(model => model.ToEmailFile, htmlAttributes: new { @type = "file", @class = "form-control" })
            </div>
        </div>
    }
    else
    {
        <div class="col-md-6 form-group hidden" id="toEmail">
            <label class=" control-label" for="form-control-9">To Email</label>
            <div class="form-group">
                @Html.TextBoxFor(model => model.ToEmail, new { @placeholder = "To Email", @class = "form-control" })
            </div>
            <div id="totalEmail"><a href="javascript:void(0)" id="popupEmailList" data-guid="@Model.GUID">Total Count:<span> @(Model.TotalCount)</span> </a></div>
        </div>
        <div class="col-md-6 form-group hidden" id="uploadToEmail">
            @Html.Label("Browse File Email", htmlAttributes: new { @class = "control-label", @for = "form-control-9" })
            <div class="form-group">
                @Html.TextBoxFor(model => model.ToEmailFile, htmlAttributes: new { @type = "file", @class = "form-control" })
            </div>
        </div>

    }
</div>
<div class="row">
    @if (!string.IsNullOrEmpty(Model.ActionTypeName) && Model.MessageTypeName != "SMTP Gateway" && Model.ActionTypeName == "NonActionBased")
    {
        <div class="col-md-6 form-group" id="toMobile">
            <label class=" control-label" for="form-control-9">To Mobile</label>
            <div class="form-group">
                @Html.TextBoxFor(model => model.PhoneNumber, new { @placeholder = "Phone Number", @class = "form-control" })
            </div>
            <div id="totalEmail"><a href="javascript:void(0)" id="popupMobileList" data-guid="@Model.GUID">Total Count:<span> @(Model.TotalCount)</span> </a></div>
        </div>
        <div class="col-md-6 form-group" id="uploadMobile">
            @Html.Label("Browse File Phone", htmlAttributes: new { @class = "control-label", @for = "form-control-9" })
            <div class="form-group">
                @Html.TextBoxFor(model => model.ToMobileNoFile, htmlAttributes: new { @type = "file", @class = "form-control" })
            </div>
        </div>
    }
    else
    {
        <div class="col-md-6 form-group hidden" id="toMobile">
            <label class=" control-label" for="form-control-9">To Mobile</label>
            <div class="form-group">
                @Html.TextBoxFor(model => model.PhoneNumber, new { @placeholder = "Phone Number", @class = "form-control" })
            </div>
            <div id="totalEmail"><a href="javascript:void(0)" id="popupMobileList" data-guid="@Model.GUID">Total Count:<span> @(Model.TotalCount)</span> </a></div>
        </div>
        <div class="col-md-6 form-group hidden" id="uploadMobile">
            @Html.Label("Browse File Phone", htmlAttributes: new { @class = "control-label", @for = "form-control-9" })
            <div class="form-group">
                @Html.TextBoxFor(model => model.ToMobileNoFile, htmlAttributes: new { @type = "file", @class = "form-control" })
            </div>
        </div>
    }
</div>
<div class="row">

    @if (!string.IsNullOrEmpty(Model.ActionTypeName) && Model.ActionTypeName.ToLower() == "nonactionbased")
    {
        <div class="col-md-6 form-group" id="dvScheduleTime">
            <label class=" control-label" for="form-control-9">Shedule Date Time </label>
            <div class="form-group">
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.ScheduleDate, new { id = "datepicker", @class = "form-control date-text" })
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.ScheduleTime, new { @class = "form-control", @placeholder = "HH:MM" })
                </div>

            </div>
        </div>
    }
    else
    {
        <div class="col-md-6 form-group hidden" id="dvScheduleTime">
            <label class=" control-label" for="form-control-9">Shedule Date Time </label>
            <div class="form-group">
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.ScheduleDate, new { id = "datepicker", @class = "form-control date-text" })
                </div>
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.ScheduleTime, new { @class = "form-control", @placeholder = "HH:MM" })
                </div>

            </div>
        </div>

    }

    @if (!string.IsNullOrEmpty(Model.ActionTypeName) && Model.MessageTypeName == "SMTP Gateway" && Model.ActionTypeName.ToLower() == "nonactionbased")
    {
        <div class="col-md-6 form-group" id="ToCCEmaildv">
            <label class=" control-label" for="form-control-9">To CC Email</label>
            <div class="form-group">
                @Html.TextBoxFor(model => model.ToCCEmail, new { @placeholder = "To CC Email", @class = "form-control" })
            </div>
        </div>
    }
    else
    {
        <div class="col-md-6 form-group hidden" id="ToCCEmaildv">
            <label class=" control-label" for="form-control-9">To CC Email</label>
            <div class="form-group">
                @Html.TextBoxFor(model => model.ToCCEmail, new { @placeholder = "To CC Email", @class = "form-control" })
            </div>
        </div>

    }
</div>
<div class="row">
    <div class="col-md-6 form-group" id="PriorityType">
        <label class="control-label" for="form-control-9">Priority</label>
        <div class="form-group">
            @Html.DropDownListFor(model => model.PriorityTypeId, Model.PriorityTypeList, "Select", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.PriorityTypeId, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="col-md-6 form-group" id="isSystemEmail">
        <label class=" control-label" for="form-control-9">Is Active </label>
        <div class="form-group">
            @Html.CheckBoxFor(x => x.IsActive)
        </div>
    </div>
</div>
<div class="row" id="IsSystem">
    <div class="col-sm-12 form-group">

        <label class="control-label" for="form-control-9">Is System Email</label>
        <div class="form-group">
            @Html.CheckBoxFor(x => x.IsSystemDefined)
        </div>

    </div>

</div>


<div class="modal" id="UploadedData" role="dialog" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header  bg-primary">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                @*<h4 class="modal-title">Bank Details</h4>*@
            </div>
            <div class="modal-body" id="UploadedExcelList">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-12">
                            <a href="javascript:void(0)" class="btn btn-primary btn-sm float-right" id="deleteRow">Delete</a>
                        </div>
                    </div>
                    <div class="row form-group">
                        <div class="col-md-8">
                            <table class="table table-striped table-bordered table-condensed" id="tblUpload" width="100%"></table>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

@Scripts.Render("~/bundles/jquery")

<div class="row form-group">
    <div class="col-md-12">
        @Html.TextAreaFor(x => x.EmailBody, new { @id = "editor1" })
        <script>

            editor = CKEDITOR.replace('editor1', {
                height: 300,
                extraPlugins: 'colorbutton,colordialog'
            });

            editor.addCommand("mySimpleCommand", {
                exec: function (edt) {
                    fadeIn('.wild-cart-m');
                }
            });

            editor.ui.addButton('SuperButton', {
                label: "Click me",
                command: 'mySimpleCommand',
                toolbar: 'insert',
                icon: '../content/img/icon-img/wild.png',
                html: ''

            });

    

            $(document).ready(function () {
                $(".cke_button__superbutton_icon").click(function () {

                    $(".wild-cart-m").fadeIn();

                });
                    $(".zmdi-close").click(function () {
                    $(".wild-cart-m").fadeOut();

                });

                $("#addWildCard").click(function (e) {
                    var value = $("#WildCards").val();
                    console.log(value);
                    CKEDITOR.instances['editor1'].insertHtml('$[' + value + ']');
                     $('.wild-cart-m').modal('toggle');
    
                });
            });

   

        </script>
    </div>

</div>
<div class="row">
    <div class="col-md-12 ">
        <button class="btn btn-primary" type="reset">Reset</button>
        <button type="submit" class="btn btn-primary">Submit</button>
    </div>
</div>
<div class="wild-cart-m">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">
                        <i class="zmdi zmdi-close"></i>
                    </span>
                </button>
                <h4 class="modal-title">Wild Card</h4>
            </div>
            <div class="modal-body">
                <div class="row ">
                    <div class="col-md-12 ">
                        <form class="form-horizontal ">

                            <div class="row form-group">

                                <div class="col-md-12">
                                    <label class="control-label" for="form-control-9">Wild Cards</label>
                                    @Html.DropDownList("WildCards", Model.WildCardList, "--Select--", new { @class = "form-control" })
                                </div>

                            </div>
                        </form>
                    </div>




                </div>

            </div>
            <div class="modal-footer">
                <button type="button" id="addWildCard" data-dismiss="modal" class="btn btn-success">OK</button>

            </div>
        </div>
    </div>
</div>

<script>
    $(document).on("change", "#TemplateTypeId", function () {
        debugger
        $('#MailerTemplateName').val($("#TemplateTypeId option:selected").text());
        if ($(this).find("option:selected").text() == 'NonActionBased') {

            $('#actions').addClass("hidden");
            $('#bccEmail').addClass("hidden");
            $('#IsSystem').addClass("hidden");
            $('#dvScheduleTime').removeClass("hidden");
            $('#emailSubject').addClass("hidden");
            $('#toEmail').addClass("hidden");
            $('#uploadToEmail').addClass("hidden");
            $('#ToCCEmaildv').addClass("hidden");
            $('#toMobile').addClass("hidden");
            $('#uploadMobile').addClass("hidden");
            $('#dvScheduleTime').addClass("hidden");
        }
        else {
            $('#actions').removeClass("hidden");
            $('#bccEmail').removeClass("hidden");
            $('#IsSystem').removeClass("hidden");
            $('#emailSubject').removeClass("hidden");
            $('#toEmail').addClass("hidden");
            $('#uploadToEmail').addClass("hidden");
            $('#ToCCEmaildv').addClass("hidden");
            $('#toMobile').addClass("hidden");
            $('#uploadMobile').addClass("hidden");
            $('#dvScheduleTime').addClass("hidden");
        }
    });

    $(document).on("change", "#MessageTypeId", function () {
        $('#MessageTypeName').val($("#MessageTypeId option:selected").text());
        if ($(this).find("option:selected").text() == 'SMS Gateway' || $(this).find("option:selected").text() == 'Notification Gateway') {
            $('#emailSubject').addClass("hidden");
            $('#toEmail').addClass("hidden");
            $('#uploadToEmail').addClass("hidden");
            $('#ToCCEmaildv').addClass("hidden");
            $('#bccEmail').addClass("hidden");
            $('#toMobile').removeClass("hidden");
            $('#uploadMobile').removeClass("hidden");
            $('#header').addClass("hidden");
            if ($('#TemplateTypeId').find('option:selected').text() == 'ActionBased') {
                $('#uploadMobile').addClass("hidden");
                $('#dvScheduleTime').addClass("hidden");
            }
        }
        else {
            $('#emailSubject').removeClass("hidden");
            $('#uploadToEmail').removeClass("hidden");
            $('#ToCCEmaildv').addClass("hidden");
            $('#toMobile').addClass("hidden");
            $('#uploadMobile').addClass("hidden");
            $('#dvScheduleTime').addClass("hidden");
            $('#header').removeClass("hidden");
            if ($('#TemplateTypeId').find('option:selected').text() == 'ActionBased') {
                $('#uploadToEmail').addClass("hidden");
                $('#bccEmail').removeClass("hidden");
                $('#toEmail').addClass("hidden");
            }
            else {
                $('#toEmail').removeClass("hidden");
                $('#ToCCEmaildv').removeClass("hidden");
            }
        }
        $.ajax({
            type: "GET",
            url: "/Templates/BindGateway?GatewayTypeId=" + $(this).val(),
            data: '{}',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                $('#GatewayId').html('');
                var opt = new Option("--Select--", 0);
                $('#GatewayId').append(opt)
                if (data.length > 0) {
                    for (var i = 0; i < data.length; i++) {
                        opt = new Option(data[i].Text, data[i].Value);
                        $('#GatewayId').append(opt);
                    }
                }
            }
        });
    });



    function BindGateway(method, ddl, e) {
        $('#' + ddl).empty();
        var val = e.value;
        if (val == "E-Mail") {
            method = "BindEmailGateway";
            $('#HeaderFooterTemplate').prop('disabled', true);
            $('#BCCEmailID').prop('disabled', true);
            $('#MailerGateway').prop('disabled', true);
            $('#EmailSubject').prop('disabled', true);
            $('#IsSystemEmail').prop('disabled', true);

        }
        else if (val == "SMS") {
            method = "BindSMSGateway";
            $('#HeaderFooterTemplate').prop('disabled', false);
            $('#BCCEmailID').prop('disabled', false);
            $('#EmailSubject').prop('disabled', false);

        }
        else {
            $('#HeaderFooterTemplate').prop('disabled', false);
            $('#BCCEmailID').prop('disabled', false);
            $('#EmailSubject').prop('disabled', false);
            $('#IsSystemEmail').prop('disabled', false);
            $('#MailerGateway').prop('disabled', false);
        }
    }
    $(document).on("keydown", "#ToCCEmail,#ToEmail", function (e) {
        if (e.keyCode == 188) {
            e.preventDefault();
        }
    });
</script>
<script>
    $(document).on("click", "#popupEmailList,#popupMobileList", function () {
        var GUID = $(this).attr("data-guid");
        var _this = $(this);
        $.ajax({
            type: "GET",
            url: "/Templates/GetuploadedDataList?GUID=" + GUID + "&MessageTypeName=" + $('#MessageTypeName').val(),
            data: '{}',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data)
            {
                $("#toast-container").fadeIn();
                if (data.length > 0) {
                    $('#tblUpload').html('');
                    if ($('#MessageTypeName').val() == "SMTP Gateway") {
                        $('#tblUpload').append('<thead><tr><td><input type="checkbox" id="chkAll" /></td> <td>Upload Email</td></tr></thead><tbody>');
                        for (var i = 0; i < data.length; i++) {
                            $('#tblUpload').append('<tr><td><input type="checkbox"  class="remove" /></td><td>' + data[i].UploadedEmail + '</td></tr>');
                        }
                        $('#tblUpload').append('</tbody>');
                    }
                    else {
                        $('#tblUpload').append('<thead><tr><td><input type="checkbox" id="chkAll" /></td> <td>Upload Mobile</td></tr></thead><tbody>');
                        for (var i = 0; i < data.length; i++) {
                            $('#tblUpload').append('<tr><td><input type="checkbox"  class="remove" /></td><td>' + data[i].UploadedMobile + '</td></tr>');
                        }
                        $('#tblUpload').append('</tbody>');
                    }
                    $('#UploadedData').modal('toggle');
                    $('#tblUpload').DataTable();
                }
                else {
                    $("#toast-container").fadeOut(5000);
                    $('.toast-error').children('div').text('No Records uploaded');
                    $('.toast-error').css("display", "block");
                }
            }
        });
    });
    $(document).on("click", "#deleteRow", function ()
    {
        var UploadedData = new Array();
        var Count = 0;
        $('#tblUpload tbody').find('tr').each(function ()
        {
            var row = $(this);
            if (row.find('input[type="checkbox"]').is(':checked'))
            {
                UploadedData.push(((row).children()[1]).innerText);
                Count = Count + 1;
            }
        });
        $.ajax({
            type: "GET",
            url: "/Templates/DeleteUploadedExcelData?GUID=" + $('#GUID').val() + "&MessageTypeName=" + $('#MessageTypeName').val() + "&UploadedData=" + UploadedData,
            data: '{}',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data)
            {
                debugger
                if (data.ResponseCode == 0)
                {
                    if ($('#MessageTypeName').val() == 'SMTP Gateway') {
                        $('#popupEmailList').children('span').text(@(Model.TotalCount=Model.TotalCount)- parseInt(Count));
                    }
                    else {
                         $('#popupMobileList').children('span').text(@(Model.TotalCount=Model.TotalCount)- parseInt(Count));
                    }
                    $('#UploadedData').modal('hide');
                }
            }
        });
    });
    $(document).on("change", "#chkAll", function (e) {

        $(".remove").prop('checked', $(this).prop("checked"));
    });
    $(document).on("change", ".remove", function (e)
    {
        if ($(this).prop("checked") == false)
        {
            $("#chkAll").prop('checked', false);
        }
        if ($('.remove:checked').length == $('.remove').length)
        {
            $("#chkAll").prop('checked', true);
        }
    });
</script>
<script>

    $(function () {
        $("#datepicker").datepicker({
            showOn: "button",
            buttonImage: "/images/calendar-icon.png",
            buttonImageOnly: true,
            dateFormat: 'dd/mm/yy',
            minDate: '0d',
        });
    });

    $('input[id$="ScheduleTime"]').inputmask("hh:mm", {
        placeholder: "HH:MM",
        insertMode: false,
        showMaskOnHover: false,
        //hourFormat: 24
    });
</script>









@Scripts.Render("~/bundles/jqueryval")